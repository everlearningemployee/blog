{
  
    
        "post0": {
            "title": "Docker로 Jenkins  실행",
            "content": "관련 Link . Docker (jenkins.io) | docker/README.md at master · jenkinsci/docker (github.com) | Plugin Manager CLI tool for Jenkins | . docker-compose.yaml . version: &quot;3&quot; services: jenkins-docker: image: docker:dind privileged: true ports: - &quot;2376:2376&quot; networks: jenkins-network: aliases: - docker environment: - DOCKER_TLS_CERTDIR=/certs volumes: - jenkins-data:/var/jenkins_home - jenkins-docker-certs:/certs/client jenkins-worker: # image: myjenkins-blueocean:1.1 build: . ports: - &quot;8080:8080&quot; - &quot;50000:50000&quot; networks: jenkins-network: environment: - DOCKER_HOST=tcp://docker:2376 - DOCKER_CERT_PATH=/certs/client - DOCKER_TLS_VERIFY=1 volumes: - jenkins-data:/var/jenkins_home - jenkins-docker-certs:/certs/client:ro depends_on: - jenkins-docker networks: jenkins-network: volumes: jenkins-data: jenkins-docker-certs: . Dockerfile . FROM jenkins/jenkins:2.263.4-lts-jdk11 USER root RUN apt-get update &amp;&amp; apt-get install -y docker.io USER jenkins RUN jenkins-plugin-cli --plugins blueocean:1.24.4 . 실행 . docker-compose up -d; docker-compose logs -f .",
            "url": "https://everlearningemployee.github.io/blog/post/Jenkins_docker_run.html",
            "relUrl": "/post/Jenkins_docker_run.html",
            "date": " • Mar 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Stdin, Stdout으로 Junit Test",
            "content": ". public class MyTest { ByteArrayOutputStream testOut = new ByteArrayOutputStream(); @Before public void setUpOutput() { System.setOut(new PrintStream(testOut)); } @Test public void test1() throws IOException { String input = &quot;6 5 r n&quot; + &quot;1 r n&quot; + &quot;1 2 r n&quot; + &quot;1 4 r n&quot; + &quot;2 3 r n&quot; + &quot;4 5 r n&quot; + &quot;4 6&quot;; String expected = &quot;1 4 6 5 2 3 r n&quot; + &quot;6 5 4 3 2 1&quot;; System.setIn(new ByteArrayInputStream(input.getBytes())); Solution.main(null); String actual = testOut.toString().trim(); assertEquals(expected, actual); } @Test public void test2() throws IOException { String input = &quot;5 7 r n&quot; + &quot;1 r n&quot; + &quot;1 4 r n&quot; + &quot;4 1 r n&quot; + &quot;1 3 r n&quot; + &quot;4 3 r n&quot; + &quot;3 5 r n&quot; + &quot;4 5 r n&quot; + &quot;4 2&quot;; String expected = &quot;1 4 5 3 2 r n&quot; + &quot;5 3 2 4 1&quot;; System.setIn(new ByteArrayInputStream(input.getBytes())); Solution.main(null); String actual = testOut.toString().trim(); assertEquals(expected, actual); } } . 참고링크: https://www.baeldung.com/java-testing-system-out-println .",
            "url": "https://everlearningemployee.github.io/blog/post/juit_test_with_stdin_stdout.html",
            "relUrl": "/post/juit_test_with_stdin_stdout.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "docker 미설치 환경에서 image pull 하기",
            "content": "NotGlop/docker-drag: Download image from the Docker Hub HTTPS API (github.com) .",
            "url": "https://everlearningemployee.github.io/blog/post/docker_drag.html",
            "relUrl": "/post/docker_drag.html",
            "date": " • Dec 30, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "CANONICAL Multipass",
            "content": "CANONICAL Multipass . Multipass orchestrates virtual Ubuntu instances | [Ubuntu] multipass를 이용한 우분투 서버 가상환경 구축 :: 또치의 삽질 보관함 (tistory.com) | . SSH Client로 접속 . 계정/비전으로는 접속이 안된다. . id_rsa.pub 내용을 authorized_keys 파일에 추가하고 인증서로 로그인하자 . cat &gt;&gt; ~/.ssh/authorized_keys . DHCP reservation 설정 . IP를 맘에 드는걸로 설정하지 못해도 좋으니 바뀌지만 말아라 한다면 DHCP reservation을 설정하면 된다. 다 그대로 두고 아래 Example의 6 line만 추가하면 된다. . network: renderer: networkd ethernets: eth0: dhcp4: true dhcp-identifier: mac match: macaddress: 52:54:00:cd:a0:1a set-name: eth0 version: 2 . Static IP 설정 . #!/bin/bash MY_IP=$(ip addr show scope global | awk &#39;/inet/{print $2}&#39;) MY_GW=$(ip route | awk &#39;/^default/{print $3}&#39;) MY_MAC=$(ip a show dev eth0 | awk &#39;/link /eth/{print $2}&#39;) cat &lt;&lt; EOF &gt; /etc/netplan/50-cloud-init.yaml network: version: 2 renderer: networkd ethernets: enp0s8: dhcp4: no addresses: - ${MY_IP} gateway4: ${MY_GW} nameservers: addresses: - 8.8.8.8 - 8.8.4.4 match: macaddress: ${MY_MAC} EOF netplan apply # curl www.google.com . multipass cmd Windows alias 설정 . doskey . multipass라는 명령이 은근히 매번 타이핑 귀찮다. Windows에도 doskey라는 alias 명령어가 있다. . alias.cmd | . @echo off doskey m = multipass $* :: commands doskey alias = doskey $* doskey cat = type $* doskey clear = cls doskey grep = find $* doskey history = doskey /history doskey man = help $* :: doskey kill = taskkill /PID $* doskey ls = dir $* doskey ll = dir $* :: doskey cp = copy $* doskey cpr = xcopy $* doskey mv = move $* doskey rm = del $* doskey rmr = deltree $* :: doskey ps = tasklist $* doskey pwd = cd :: doskey sudo = runas /user:administrator $* . 시작 시 doskey 적용 .reg . 위 alias.cmd를 레지스트리에 등록하여 도스창 열릴 때 마다 적용 시킨다. . alias - Aliases in Windows command prompt - Stack Overflow . alias_auto_set.reg | . Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER Software Microsoft Command Processor] &quot;AutoRun&quot;=&quot;%USERPROFILE% alias.cmd&quot; .",
            "url": "https://everlearningemployee.github.io/blog/post/canonical_multipass.html",
            "relUrl": "/post/canonical_multipass.html",
            "date": " • Dec 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "KRX 데이터 조회 - 전일급등주",
            "content": "왜 이렇게 만들었는지 모르겠는데 KRX는 한번 꼬아서 다운로드 받는다. 이러면 내가 못할 줄 알고? . def downloadKrxData(cd): resp = requests.post( &#39;http://file.krx.co.kr/download.jspx&#39;, headers={ &#39;User-Agent&#39;: &#39;Mozilla/5.0&#39;, &#39;Referer&#39;: &#39;http://marketdata.krx.co.kr/&#39;, }, params={&#39;code&#39;: cd}, ) tp = resp.headers[&#39;Content-Disposition&#39;].split(&#39;.&#39;)[1] if tp == &#39;csv&#39;: return pd.read_csv(StringIO(resp.text)) if tp == &#39;xls&#39;: return pd.read_excel(BytesIO(resp.content)) . KRX &#55092;&#51109;&#51068;&#51012; &#48152;&#50689;&#54620; &#51204;&#50689;&#50629;&#51068; . KRX 01023 휴장일 http://marketdata.krx.co.kr/mdi#document=01100305 | . def closingDays(year): resp = requests.get( &#39;http://marketdata.krx.co.kr/contents/COM/GenerateOTP.jspx&#39;, headers={&#39;User-Agent&#39;: &#39;Mozilla/5.0&#39;}, params={ &#39;name&#39;: &#39;fileDown&#39;, &#39;filetype&#39;: &#39;xls&#39;, &#39;url&#39;: &#39;MKD/01/0110/01100305/mkd01100305_01&#39;, &#39;search_bas_yy&#39;: year, &#39;gridTp&#39;: &#39;KRX&#39;, &#39;pagePath&#39;: &#39;/contents/MKD/01/0110/01100305/MKD01100305.jsp&#39;, }, ) return downloadKrxData(resp.text)[&#39;일자 및 요일&#39;] def getPreviousBizDay(today): pday = datetime.datetime.strptime(today, &#39;%Y%m%d&#39;) yyyy = pday.year cds = closingDays(yyyy) while True: pday = pday - BDay(1) if yyyy != pday.year: yyyy = pday.year cds = pd.concat([cds, closingDays(yyyy)]) if pday.strftime(&quot;%Y-%m-%d&quot;) not in cds.values: return pday.strftime(&quot;%Y%m%d&quot;) . &#51204;&#51068; &#46321;&#46973; . KRX 80037 전체종목 등락률 http://marketdata.krx.co.kr/mdi#document=13020102 | . def soaredStocks(dt): print(dt) resp = requests.get( &#39;http://marketdata.krx.co.kr/contents/COM/GenerateOTP.jspx&#39;, headers={&#39;User-Agent&#39;: &#39;Mozilla/5.0&#39;}, params={ &#39;name&#39;: &#39;fileDown&#39;, &#39;filetype&#39;: &#39;csv&#39;, &#39;url&#39;: &#39;MKD/13/1302/13020102/mkd13020102&#39;, &#39;ind_tp&#39;: &#39;ALL&#39;, &#39;period_strt_dd&#39;: dt, &#39;period_end_dd&#39;: dt, &#39;pagePath&#39;: &#39;/contents/MKD/13/1302/13020102/MKD13020102.jsp&#39;, }, ) return downloadKrxData(resp.text) . &#51204; &#50689;&#50629;&#51068; 15% &#51060;&#49345; &#50724;&#47480; &#51333;&#47785; . dt = getPreviousBizDay(datetime.datetime.now().strftime(&#39;%Y%m%d&#39;)) # dt = &#39;20201026&#39; df_soarings = soaredStocks(dt) . 20201116 . import pandasql as ps ps.sqldf(&#39;&#39;&#39; select a.*, &#39;https://finance.naver.com/item/main.nhn?code=&#39; || a.종목코드 as &#39;네이버주식&#39; from df_soarings a where 등락률 &gt;= 15 order by 등락률 desc &#39;&#39;&#39;) . 종목코드 종목명 시작일기준가(원) 종료일종가(원) 대비 등락률 거래량(주) 거래대금(원) 네이버주식 . 0 130500 | GH신소재 | 6,200 | 8,060 | 1,860 | 30.00 | 12,460,302 | 91,535,025,950 | https://finance.naver.com/item/main.nhn?code=130500 | . 1 267850 | 아시아나IDT | 24,000 | 31,200 | 7,200 | 30.00 | 4,731,001 | 139,087,744,150 | https://finance.naver.com/item/main.nhn?code=267850 | . 2 323990 | 박셀바이오 | 63,000 | 81,900 | 18,900 | 30.00 | 1,003,594 | 78,865,760,800 | https://finance.naver.com/item/main.nhn?code=323990 | . 3 002995 | 금호산업우 | 40,850 | 53,100 | 12,250 | 29.99 | 40,426 | 2,144,858,000 | https://finance.naver.com/item/main.nhn?code=002995 | . 4 003495 | 대한항공우 | 27,900 | 36,250 | 8,350 | 29.93 | 1,265,113 | 42,564,569,050 | https://finance.naver.com/item/main.nhn?code=003495 | . 5 298690 | 에어부산 | 3,845 | 4,995 | 1,150 | 29.91 | 24,371,849 | 114,051,697,690 | https://finance.naver.com/item/main.nhn?code=298690 | . 6 304840 | 피플바이오 | 43,350 | 56,300 | 12,950 | 29.87 | 4,542,398 | 240,347,601,050 | https://finance.naver.com/item/main.nhn?code=304840 | . 7 020560 | 아시아나항공 | 4,290 | 5,570 | 1,280 | 29.84 | 141,613,627 | 743,745,121,745 | https://finance.naver.com/item/main.nhn?code=020560 | . 8 002990 | 금호산업 | 7,910 | 10,250 | 2,340 | 29.58 | 4,483,195 | 43,274,086,290 | https://finance.naver.com/item/main.nhn?code=002990 | . 9 090710 | 휴림로봇 | 1,620 | 2,030 | 410 | 25.31 | 57,413,835 | 111,381,348,865 | https://finance.naver.com/item/main.nhn?code=090710 | . 10 18064K | 한진칼우 | 54,200 | 67,400 | 13,200 | 24.35 | 1,073,832 | 69,389,772,100 | https://finance.naver.com/item/main.nhn?code=18064K | . 11 048870 | 시너지이노베이션 | 3,415 | 4,190 | 775 | 22.69 | 16,439,458 | 64,421,747,445 | https://finance.naver.com/item/main.nhn?code=048870 | . 12 290690 | 소룩스 | 25,600 | 31,000 | 5,400 | 21.09 | 8,489,608 | 251,883,843,400 | https://finance.naver.com/item/main.nhn?code=290690 | . 13 215380 | 우정바이오 | 8,150 | 9,610 | 1,460 | 17.91 | 6,061,553 | 57,005,999,480 | https://finance.naver.com/item/main.nhn?code=215380 | . 14 005950 | 이수화학 | 13,200 | 15,500 | 2,300 | 17.42 | 8,667,332 | 127,332,468,600 | https://finance.naver.com/item/main.nhn?code=005950 | . 15 037230 | 한국팩키지 | 4,000 | 4,670 | 670 | 16.75 | 33,677,176 | 153,477,105,230 | https://finance.naver.com/item/main.nhn?code=037230 | . 16 005430 | 한국공항 | 36,450 | 42,350 | 5,900 | 16.19 | 1,043,130 | 45,280,421,150 | https://finance.naver.com/item/main.nhn?code=005430 | . 17 246960 | 이노테라피 | 15,600 | 18,100 | 2,500 | 16.03 | 831,642 | 14,782,690,200 | https://finance.naver.com/item/main.nhn?code=246960 | . 18 007980 | 태평양물산 | 1,650 | 1,905 | 255 | 15.45 | 33,652,979 | 67,288,532,555 | https://finance.naver.com/item/main.nhn?code=007980 | . 19 083420 | 그린케미칼 | 5,520 | 6,350 | 830 | 15.04 | 10,691,896 | 66,486,967,500 | https://finance.naver.com/item/main.nhn?code=083420 | . 20 311060 | 엘에이티 | 2,900 | 3,335 | 435 | 15.00 | 1 | 3,335 | https://finance.naver.com/item/main.nhn?code=311060 | .",
            "url": "https://everlearningemployee.github.io/blog/post/Soaring_Stocks.html",
            "relUrl": "/post/Soaring_Stocks.html",
            "date": " • Oct 25, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "패키지관리자 설정파일 위치",
            "content": "폐쇠망에서 Dockerizing할 때 요긴하게 참고하시라 . [꿀팁] $HOME에 PVC 마운트하는 경우는 전체 사용자에게 적용되는 설정파일 위치를 사용하면 된다 . Ubuntu APT Repository . 설정파일 위치 . /etc/apt/sources.list.d/ | . 설정파일 샘플 . # source.list deb http://ubuntu.mirror.xxx.net/ubuntu bionic main restricted deb http://ubuntu.mirror.xxx.net/ubuntu bionic-updates main restricted deb http://ubuntu.mirror.xxx.net/ubuntu bionic universe deb http://ubuntu.mirror.xxx.net/ubuntu bionic-updates universe deb http://ubuntu.mirror.xxx.net/ubuntu bionic multiverse deb http://ubuntu.mirror.xxx.net/ubuntu bionic-updates multiverse deb http://ubuntu.mirror.xxx.net/ubuntu bionic-backports main restricted universe multiverse deb http://ubuntu.mirror.xxx.net/ubuntu bionic-security main restricted deb http://ubuntu.mirror.xxx.net/ubuntu bionic-security universe deb http://ubuntu.mirror.xxx.net/ubuntu bionic-security multiverse . PyPI Repository . 설정파일 위치 . https://pip.pypa.io/en/stable/user_guide/#config-file | 전체 사용자: /etc/pip.conf | 개별 사용자: Unix/MacOS: ${HOME}/.pip/pip.conf | Windows: %HOME% pip pip.ini | . | . 설정파일 샘플 . [global] index-url = http://nexus.xxx.com/repository/pypi-remote/simple/ trusted-host = nexus.xxx.com . npm Registry . 설정파일 위치 . 전체 사용자: /usr/etc/npmrc | 개별 사용자: ~/.npmrc | . 설정파일 샘플 . registry=http://nexus.xxx.net/repository/npm/ . yarn Registry . 설정파일 위치 . 전체 사용자: /usr/etc/yarnrc | 개별 사용자: ~/.yarnrc | . 설정파일 샘플 . registry &quot;http://nexus.xxx.net:8081/artifactory/api/npm/npm&quot; . 기타1) Docker Registry . 설정파일 위치 . ${DOCKER_CONFIG}/config.json | 일반적으로 ~/config.json | 전체 사용자 적용 위치는 없음 | . 설정파일 샘플 . { &quot;auths&quot;: { &quot;yyy.xxx.net&quot;: { &quot;auth&quot;: &quot;THisISASaMplECOnFIgfilEWow==&quot; } }, &quot;HttpHeaders&quot;: { &quot;User-Agent&quot;: &quot;Docker-Client/19.03.5 (linux)&quot; } } . 기타2) .bashrc . 설정파일 위치 . 전체 사용자: Debian-based Linux: /etc/bash.bashrc | Redhat, Fedora: /etc/bashrc | Suse, OpenSuse,: /etc/bash.bashrc.local | . | 개별 사용자: ~/.bashrc | .",
            "url": "https://everlearningemployee.github.io/blog/post/package_manager_configuration_file_location.html",
            "relUrl": "/post/package_manager_configuration_file_location.html",
            "date": " • Aug 25, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "SQL vs. Pandas",
            "content": ". Note: 작성중 . 아래 문서를 공부함 . How to rewrite your SQL queries in Pandas, and more by Irina Truong | pandas Getting started 문서: Comparison with SQL | . !pip install pandas . Requirement already satisfied: pandas in d: bin miniconda3 envs blog lib site-packages (1.1.1) Requirement already satisfied: pytz&gt;=2017.2 in d: bin miniconda3 envs blog lib site-packages (from pandas) (2020.1) Requirement already satisfied: python-dateutil&gt;=2.7.3 in d: bin miniconda3 envs blog lib site-packages (from pandas) (2.8.1) Requirement already satisfied: numpy&gt;=1.15.4 in d: bin miniconda3 envs blog lib site-packages (from pandas) (1.19.1) Requirement already satisfied: six&gt;=1.5 in d: bin miniconda3 envs blog lib site-packages (from python-dateutil&gt;=2.7.3-&gt;pandas) (1.15.0) . Pandas import + &#45936;&#51060;&#53552; &#48520;&#47084;&#50724;&#44592; . import pandas as pd airports = pd.read_csv(&#39;https://ourairports.com/data/airports.csv&#39;) airport_freq = pd.read_csv(&#39;https://ourairports.com/data/airport-frequencies.csv&#39;) runways = pd.read_csv(&#39;https://ourairports.com/data/runways.csv&#39;) . type(airports) . pandas.core.frame.DataFrame . Dataframe . airports.head(4) . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 0 6523 | 00A | heliport | Total Rf Heliport | 40.070801 | -74.933601 | 11.0 | NaN | US | US-PA | Bensalem | no | 00A | NaN | 00A | NaN | NaN | NaN | . 1 323361 | 00AA | small_airport | Aero B Ranch Airport | 38.704022 | -101.473911 | 3435.0 | NaN | US | US-KS | Leoti | no | 00AA | NaN | 00AA | NaN | NaN | NaN | . 2 6524 | 00AK | small_airport | Lowell Field | 59.949200 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . 3 6525 | 00AL | small_airport | Epps Airpark | 34.864799 | -86.770302 | 820.0 | NaN | US | US-AL | Harvest | no | 00AL | NaN | 00AL | NaN | NaN | NaN | . airports.shape . (57376, 18) . airports.columns . Index([&#39;id&#39;, &#39;ident&#39;, &#39;type&#39;, &#39;name&#39;, &#39;latitude_deg&#39;, &#39;longitude_deg&#39;, &#39;elevation_ft&#39;, &#39;continent&#39;, &#39;iso_country&#39;, &#39;iso_region&#39;, &#39;municipality&#39;, &#39;scheduled_service&#39;, &#39;gps_code&#39;, &#39;iata_code&#39;, &#39;local_code&#39;, &#39;home_link&#39;, &#39;wikipedia_link&#39;, &#39;keywords&#39;], dtype=&#39;object&#39;) . airports.describe() . id latitude_deg longitude_deg elevation_ft . count 57376.000000 | 57376.000000 | 57376.000000 | 49557.000000 | . mean 93753.354469 | 25.571000 | -34.611389 | 1253.089210 | . std 127917.359277 | 27.282870 | 79.909407 | 1615.832743 | . min 2.000000 | -90.000000 | -179.876999 | -1266.000000 | . 25% 14472.750000 | 7.665290 | -92.046148 | 208.000000 | . 50% 28960.500000 | 36.222551 | -71.458750 | 722.000000 | . 75% 45914.250000 | 43.764555 | 14.537073 | 1517.000000 | . max 335599.000000 | 90.000000 | 179.999894 | 29977.000000 | . SELECT, WHERE, DISTINCT, LIMIT . select * from airports; . airports . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 0 6523 | 00A | heliport | Total Rf Heliport | 40.070801 | -74.933601 | 11.0 | NaN | US | US-PA | Bensalem | no | 00A | NaN | 00A | NaN | NaN | NaN | . 1 323361 | 00AA | small_airport | Aero B Ranch Airport | 38.704022 | -101.473911 | 3435.0 | NaN | US | US-KS | Leoti | no | 00AA | NaN | 00AA | NaN | NaN | NaN | . 2 6524 | 00AK | small_airport | Lowell Field | 59.949200 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . 3 6525 | 00AL | small_airport | Epps Airpark | 34.864799 | -86.770302 | 820.0 | NaN | US | US-AL | Harvest | no | 00AL | NaN | 00AL | NaN | NaN | NaN | . 4 6526 | 00AR | closed | Newport Hospital &amp; Clinic Heliport | 35.608700 | -91.254898 | 237.0 | NaN | US | US-AR | Newport | no | NaN | NaN | NaN | NaN | NaN | 00AR | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 57371 317861 | ZYYK | medium_airport | Yingkou Lanqi Airport | 40.542524 | 122.358600 | 0.0 | AS | CN | CN-21 | Yingkou | yes | ZYYK | YKH | NaN | NaN | https://en.wikipedia.org/wiki/Yingkou_Lanqi_Ai... | NaN | . 57372 32753 | ZYYY | medium_airport | Shenyang Dongta Airport | 41.784401 | 123.496002 | NaN | AS | CN | CN-21 | Shenyang | no | ZYYY | NaN | NaN | NaN | NaN | NaN | . 57373 46378 | ZZ-0001 | heliport | Sealand Helipad | 51.894444 | 1.482500 | 40.0 | EU | GB | GB-ENG | Sealand | no | NaN | NaN | NaN | http://www.sealandgov.org/ | https://en.wikipedia.org/wiki/Principality_of_... | Roughs Tower Helipad | . 57374 307326 | ZZ-0002 | small_airport | Glorioso Islands Airstrip | -11.584278 | 47.296389 | 11.0 | AF | TF | TF-U-A | Grande Glorieuse | no | NaN | NaN | NaN | NaN | NaN | NaN | . 57375 313629 | ZZZZ | small_airport | Satsuma Iōjima Airport | 30.784722 | 130.270556 | 338.0 | AS | JP | JP-46 | Mishima-Mura | no | RJX7 | NaN | RJX7 | NaN | http://wikimapia.org/6705190/Satsuma-Iwo-jima-... | SATSUMA,IWOJIMA,RJX7 | . 57376 rows × 18 columns . select municipality from airports . sr = airports.municipality print(type(sr)) . &lt;class &#39;pandas.core.series.Series&#39;&gt; . sr . 0 Bensalem 1 Leoti 2 Anchor Point 3 Harvest 4 Newport ... 57371 Yingkou 57372 Shenyang 57373 Sealand 57374 Grande Glorieuse 57375 Mishima-Mura Name: municipality, Length: 57376, dtype: object . select municipality from airports limit 4; . airports.head(4).municipality . 0 Bensalem 1 Leoti 2 Anchor Point 3 Harvest Name: municipality, dtype: object . airports.municipality.head(4) . 0 Bensalem 1 Leoti 2 Anchor Point 3 Harvest Name: municipality, dtype: object . select ident, name, municipality from airports; . df = airports[[&#39;ident&#39;, &#39;name&#39;, &#39;municipality&#39;]] type(df) . pandas.core.frame.DataFrame . df . ident name municipality . 0 00A | Total Rf Heliport | Bensalem | . 1 00AA | Aero B Ranch Airport | Leoti | . 2 00AK | Lowell Field | Anchor Point | . 3 00AL | Epps Airpark | Harvest | . 4 00AR | Newport Hospital &amp; Clinic Heliport | Newport | . ... ... | ... | ... | . 57371 ZYYK | Yingkou Lanqi Airport | Yingkou | . 57372 ZYYY | Shenyang Dongta Airport | Shenyang | . 57373 ZZ-0001 | Sealand Helipad | Sealand | . 57374 ZZ-0002 | Glorioso Islands Airstrip | Grande Glorieuse | . 57375 ZZZZ | Satsuma Iōjima Airport | Mishima-Mura | . 57376 rows × 3 columns . select * from airports where municipality = &#39;Anchor Point&#39;; . airports[airports.municipality == &#39;Anchor Point&#39;] . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 2 6524 | 00AK | small_airport | Lowell Field | 59.9492 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . 10523 16097 | AK00 | small_airport | Anchor River Airpark | 59.7967 | -151.863007 | 120.0 | NaN | US | US-AK | Anchor Point | no | AK00 | NaN | AK00 | NaN | NaN | NaN | . airports[airports[&#39;municipality&#39;] == &#39;Anchor Point&#39;] . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 2 6524 | 00AK | small_airport | Lowell Field | 59.9492 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . 10523 16097 | AK00 | small_airport | Anchor River Airpark | 59.7967 | -151.863007 | 120.0 | NaN | US | US-AK | Anchor Point | no | AK00 | NaN | AK00 | NaN | NaN | NaN | . airports[airports.index == 2] . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 2 6524 | 00AK | small_airport | Lowell Field | 59.9492 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . df = airports[airports.municipality == &#39;Anchor Point&#39;] type(df) . pandas.core.frame.DataFrame . df . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 2 6524 | 00AK | small_airport | Lowell Field | 59.9492 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . 10523 16097 | AK00 | small_airport | Anchor River Airpark | 59.7967 | -151.863007 | 120.0 | NaN | US | US-AK | Anchor Point | no | AK00 | NaN | AK00 | NaN | NaN | NaN | . select ident, name, municipality from airports where municipality = &#39;Los Angeles&#39; . airports[airports.municipality == &#39;Los Angeles&#39;] [[&#39;ident&#39;, &#39;name&#39;, &#39;municipality&#39;]] . ident name municipality . 71 01CN | Los Angeles County Sheriff&#39;s Department Heliport | Los Angeles | . 643 0CA0 | Drew Medical Center Heliport | Los Angeles | . 645 0CA2 | VA Greater Los Angeles Health Care Center Heli... | Los Angeles | . 670 0CL7 | Good Samaritan Hospital Heliport | Los Angeles | . 1465 14L | Devonshire Area Heliport | Los Angeles | . ... ... | ... | ... | . 52334 US-1472 | Murdock Plaza Helipad | Los Angeles | . 52356 US-1494 | Center West Helipad | Los Angeles | . 52358 US-1496 | W Hollywood Helipad | Los Angeles | . 52359 US-1497 | 1600 Vine Helipad | Los Angeles | . 52360 US-1498 | Vine Street Tower Helipad | Los Angeles | . 100 rows × 3 columns . airports[[&#39;ident&#39;, &#39;name&#39;, &#39;municipality&#39;]] [airports.municipality == &#39;Los Angeles&#39;] . ident name municipality . 71 01CN | Los Angeles County Sheriff&#39;s Department Heliport | Los Angeles | . 643 0CA0 | Drew Medical Center Heliport | Los Angeles | . 645 0CA2 | VA Greater Los Angeles Health Care Center Heli... | Los Angeles | . 670 0CL7 | Good Samaritan Hospital Heliport | Los Angeles | . 1465 14L | Devonshire Area Heliport | Los Angeles | . ... ... | ... | ... | . 52334 US-1472 | Murdock Plaza Helipad | Los Angeles | . 52356 US-1494 | Center West Helipad | Los Angeles | . 52358 US-1496 | W Hollywood Helipad | Los Angeles | . 52359 US-1497 | 1600 Vine Helipad | Los Angeles | . 52360 US-1498 | Vine Street Tower Helipad | Los Angeles | . 100 rows × 3 columns . select distinct municipality from airport; . airports.municipality.unique() . array([&#39;Bensalem&#39;, &#39;Leoti&#39;, &#39;Anchor Point&#39;, ..., &#39;Sealand&#39;, &#39;Grande Glorieuse&#39;, &#39;Mishima-Mura&#39;], dtype=object) . airports[[&#39;ident&#39;, &#39;name&#39;, &#39;municipality&#39;]] #.unique() . ident name municipality . 0 00A | Total Rf Heliport | Bensalem | . 1 00AA | Aero B Ranch Airport | Leoti | . 2 00AK | Lowell Field | Anchor Point | . 3 00AL | Epps Airpark | Harvest | . 4 00AR | Newport Hospital &amp; Clinic Heliport | Newport | . ... ... | ... | ... | . 57371 ZYYK | Yingkou Lanqi Airport | Yingkou | . 57372 ZYYY | Shenyang Dongta Airport | Shenyang | . 57373 ZZ-0001 | Sealand Helipad | Sealand | . 57374 ZZ-0002 | Glorioso Islands Airstrip | Grande Glorieuse | . 57375 ZZZZ | Satsuma Iōjima Airport | Mishima-Mura | . 57376 rows × 3 columns . SELECT with multiple conditions . select * from airports where iso_region = &#39;US-CA&#39; and type = &#39;seaplane_base&#39;; . df = airports[(airports.iso_region == &#39;US-CA&#39;) &amp; (airports.type == &#39;seaplane_base&#39;)] [[&#39;name&#39;, &#39;iso_region&#39;, &#39;type&#39;]] print(type(df)) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; . df . name iso_region type . 984 San Luis Reservoir Seaplane Base | US-CA | seaplane_base | . 2505 Commodore Center Seaplane Base | US-CA | seaplane_base | . 6278 Konocti - Clear Lake Seaplane Base | US-CA | seaplane_base | . 13587 Folsom Lake Seaplane Base | US-CA | seaplane_base | . 15932 Ferndale Resort Seaplane Base | US-CA | seaplane_base | . 18323 Lake Berryessa Seaplane Base | US-CA | seaplane_base | . 23853 Bridge Bay Resort Seaplane Base | US-CA | seaplane_base | . 31879 Pebbly Beach Seaplane Base | US-CA | seaplane_base | . 38693 Lake Oroville Landing Area Seaplane Base | US-CA | seaplane_base | . 42411 Lost Isle Seaplane Base | US-CA | seaplane_base | . 49939 Two Harbors Amphibious Terminal | US-CA | seaplane_base | . select ident, name, municipality from airports where iso_region = &#39;US-CA&#39; and type = &#39;large_airport&#39;; . airports[(airports.iso_region == &#39;US-CA&#39;) &amp; (airports.type == &#39;large_airport&#39;)] [[&#39;ident&#39;, &#39;name&#39;, &#39;municipality&#39;]] . ident name municipality . 27512 KBAB | Beale Air Force Base | Marysville | . 28350 KEDW | Edwards Air Force Base | Edwards | . 29141 KLAX | Los Angeles International Airport | Los Angeles | . 29668 KOAK | Metropolitan Oakland International Airport | Oakland | . 29724 KONT | Ontario International Airport | Ontario | . 31245 KSAN | San Diego International Airport | San Diego | . 31285 KSFO | San Francisco International Airport | San Francisco | . 31306 KSJC | Norman Y. Mineta San Jose International Airport | San Jose | . 31328 KSMF | Sacramento International Airport | Sacramento | . 31334 KSNA | John Wayne Airport-Orange County Airport | Santa Ana | . 31383 KSUU | Travis Air Force Base | Fairfield | . 31617 KVBG | Vandenberg Air Force Base | Lompoc | . airports[[&#39;ident&#39;, &#39;name&#39;, &#39;municipality&#39;]] [(airports.iso_region == &#39;US-CA&#39;) &amp; (airports.type == &#39;large_airport&#39;)] . ident name municipality . 27512 KBAB | Beale Air Force Base | Marysville | . 28350 KEDW | Edwards Air Force Base | Edwards | . 29141 KLAX | Los Angeles International Airport | Los Angeles | . 29668 KOAK | Metropolitan Oakland International Airport | Oakland | . 29724 KONT | Ontario International Airport | Ontario | . 31245 KSAN | San Diego International Airport | San Diego | . 31285 KSFO | San Francisco International Airport | San Francisco | . 31306 KSJC | Norman Y. Mineta San Jose International Airport | San Jose | . 31328 KSMF | Sacramento International Airport | Sacramento | . 31334 KSNA | John Wayne Airport-Orange County Airport | Santa Ana | . 31383 KSUU | Travis Air Force Base | Fairfield | . 31617 KVBG | Vandenberg Air Force Base | Lompoc | . ORDER BY . select * from airport_freq where airport_ident = &#39;KLAX&#39; order by type; . airport_freq[airport_freq.airport_ident == &#39;KLAX&#39;].sort_values(&#39;type&#39;) . id airport_ref airport_ident type description frequency_mhz . 11952 60767 | 3632 | KLAX | APP | SOCAL APP | 36.07 | . 11953 60766 | 3632 | KLAX | APP | SOCAL APP | 124.30 | . 11954 60768 | 3632 | KLAX | ATIS | ATIS | 133.80 | . 11955 60769 | 3632 | KLAX | CLD | CLNC DEL | 121.40 | . 11956 60770 | 3632 | KLAX | DEP | SOCAL DEP | 124.30 | . 11957 60771 | 3632 | KLAX | GND | GND | 121.65 | . 11958 60772 | 3632 | KLAX | MISC | CG | 34.50 | . 11959 60773 | 3632 | KLAX | MISC | CG | 898.40 | . 11960 60774 | 3632 | KLAX | OPS | AF | 37.22 | . 11961 60775 | 3632 | KLAX | TWR | TWR | 119.80 | . 11962 60776 | 3632 | KLAX | UNIC | UNICOM | 122.95 | . select * from airport_freq where airport_ident = &#39;KLAX&#39; order by type desc; . airport_freq[airport_freq.airport_ident == &#39;KLAX&#39;].sort_values(&#39;type&#39;, ascending=False) . id airport_ref airport_ident type description frequency_mhz . 11962 60776 | 3632 | KLAX | UNIC | UNICOM | 122.95 | . 11961 60775 | 3632 | KLAX | TWR | TWR | 119.80 | . 11960 60774 | 3632 | KLAX | OPS | AF | 37.22 | . 11958 60772 | 3632 | KLAX | MISC | CG | 34.50 | . 11959 60773 | 3632 | KLAX | MISC | CG | 898.40 | . 11957 60771 | 3632 | KLAX | GND | GND | 121.65 | . 11956 60770 | 3632 | KLAX | DEP | SOCAL DEP | 124.30 | . 11955 60769 | 3632 | KLAX | CLD | CLNC DEL | 121.40 | . 11954 60768 | 3632 | KLAX | ATIS | ATIS | 133.80 | . 11952 60767 | 3632 | KLAX | APP | SOCAL APP | 36.07 | . 11953 60766 | 3632 | KLAX | APP | SOCAL APP | 124.30 | . IN&#8230; NOT IN . select * from airports where type in (&#39;heliport&#39;, &#39;balloonport&#39;); . airports[airports.type.isin([&#39;heliport&#39;, &#39;balloonport&#39;])] . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 0 6523 | 00A | heliport | Total Rf Heliport | 40.070801 | -74.933601 | 11.0 | NaN | US | US-PA | Bensalem | no | 00A | NaN | 00A | NaN | NaN | NaN | . 9 322658 | 00CN | heliport | Kitchen Creek Helibase Heliport | 32.727374 | -116.459742 | 3350.0 | NaN | US | US-CA | Pine Valley | no | 00CN | NaN | 00CN | NaN | NaN | NaN | . 12 6532 | 00FD | heliport | Ringhaver Heliport | 28.846600 | -82.345398 | 25.0 | NaN | US | US-FL | Riverview | no | 00FD | NaN | 00FD | NaN | NaN | NaN | . 15 6535 | 00GE | heliport | Caffrey Heliport | 33.884201 | -84.733902 | 957.0 | NaN | US | US-GA | Hiram | no | 00GE | NaN | 00GE | NaN | NaN | NaN | . 16 6536 | 00HI | heliport | Kaupulehu Heliport | 19.832715 | -155.980233 | 43.0 | NaN | US | US-HI | Kailua-Kona | no | 00HI | NaN | 00HI | NaN | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 56988 312611 | ZA-0117 | heliport | Pumba Helipad | -33.387799 | 26.410595 | NaN | AF | ZA | ZA-EC | Nelson Mandela Bay | no | NaN | NaN | NaN | http://www.pumbagamereserve.co.za/amenities | NaN | NaN | . 56990 312624 | ZA-0119 | heliport | Cape Town Heliport | -33.901018 | 18.425936 | NaN | AF | ZA | ZA-WC | NaN | no | NaN | NaN | NaN | NaN | NaN | NaN | . 57011 318475 | ZA-0140 | heliport | Kuruman Hospital Heliport | -27.459904 | 23.443762 | NaN | AF | ZA | ZA-NC | Kuruman | no | NaN | NaN | NaN | NaN | NaN | NaN | . 57108 301278 | ZIZ | heliport | Zamzama Heliport | 26.710944 | 67.667250 | 128.0 | AS | PK | PK-SD | Zamzama Gas Field | no | NaN | ZIZ | NaN | NaN | NaN | NaN | . 57373 46378 | ZZ-0001 | heliport | Sealand Helipad | 51.894444 | 1.482500 | 40.0 | EU | GB | GB-ENG | Sealand | no | NaN | NaN | NaN | http://www.sealandgov.org/ | https://en.wikipedia.org/wiki/Principality_of_... | Roughs Tower Helipad | . 12031 rows × 18 columns . select * from airports where type not in (&#39;heliport&#39;, &#39;balloonport&#39;); . airports[~airports.type.isin([&#39;heliport&#39;, &#39;balloonport&#39;])] . id ident type name latitude_deg longitude_deg elevation_ft continent iso_country iso_region municipality scheduled_service gps_code iata_code local_code home_link wikipedia_link keywords . 1 323361 | 00AA | small_airport | Aero B Ranch Airport | 38.704022 | -101.473911 | 3435.0 | NaN | US | US-KS | Leoti | no | 00AA | NaN | 00AA | NaN | NaN | NaN | . 2 6524 | 00AK | small_airport | Lowell Field | 59.949200 | -151.695999 | 450.0 | NaN | US | US-AK | Anchor Point | no | 00AK | NaN | 00AK | NaN | NaN | NaN | . 3 6525 | 00AL | small_airport | Epps Airpark | 34.864799 | -86.770302 | 820.0 | NaN | US | US-AL | Harvest | no | 00AL | NaN | 00AL | NaN | NaN | NaN | . 4 6526 | 00AR | closed | Newport Hospital &amp; Clinic Heliport | 35.608700 | -91.254898 | 237.0 | NaN | US | US-AR | Newport | no | NaN | NaN | NaN | NaN | NaN | 00AR | . 5 322127 | 00AS | small_airport | Fulton Airport | 34.942803 | -97.818019 | 1100.0 | NaN | US | US-OK | Alex | no | 00AS | NaN | 00AS | NaN | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 57370 27244 | ZYYJ | medium_airport | Yanji Chaoyangchuan Airport | 42.882801 | 129.451004 | 624.0 | AS | CN | CN-22 | Yanji | yes | ZYYJ | YNJ | NaN | NaN | https://en.wikipedia.org/wiki/Yanji_Chaoyangch... | NaN | . 57371 317861 | ZYYK | medium_airport | Yingkou Lanqi Airport | 40.542524 | 122.358600 | 0.0 | AS | CN | CN-21 | Yingkou | yes | ZYYK | YKH | NaN | NaN | https://en.wikipedia.org/wiki/Yingkou_Lanqi_Ai... | NaN | . 57372 32753 | ZYYY | medium_airport | Shenyang Dongta Airport | 41.784401 | 123.496002 | NaN | AS | CN | CN-21 | Shenyang | no | ZYYY | NaN | NaN | NaN | NaN | NaN | . 57374 307326 | ZZ-0002 | small_airport | Glorioso Islands Airstrip | -11.584278 | 47.296389 | 11.0 | AF | TF | TF-U-A | Grande Glorieuse | no | NaN | NaN | NaN | NaN | NaN | NaN | . 57375 313629 | ZZZZ | small_airport | Satsuma Iōjima Airport | 30.784722 | 130.270556 | 338.0 | AS | JP | JP-46 | Mishima-Mura | no | RJX7 | NaN | RJX7 | NaN | http://wikimapia.org/6705190/Satsuma-Iwo-jima-... | SATSUMA,IWOJIMA,RJX7 | . 45345 rows × 18 columns . GROUP BY, COUNT, SUM, ORDER BY . select iso_country, type, count(*) from airports group by iso_country, type order by iso_country, type; . airports.groupby([&#39;iso_country&#39;, &#39;type&#39;]).size() . iso_country type AD heliport 2 AE closed 1 heliport 21 large_airport 4 medium_airport 7 ... ZM small_airport 94 ZW closed 2 large_airport 1 medium_airport 8 small_airport 128 Length: 850, dtype: int64 . select iso_country, type, count(*) from airports group by iso_country, type order by iso_country, count(*) desc; . airports.groupby([&#39;iso_country&#39;, &#39;type&#39;]).size() .to_frame(&#39;count&#39;).reset_index() .sort_values([&#39;iso_country&#39;, &#39;count&#39;], ascending=[True, False]) . iso_country type count . 0 AD | heliport | 2 | . 2 AE | heliport | 21 | . 6 AE | small_airport | 16 | . 4 AE | medium_airport | 7 | . 3 AE | large_airport | 4 | . ... ... | ... | ... | . 843 ZM | large_airport | 1 | . 849 ZW | small_airport | 128 | . 848 ZW | medium_airport | 8 | . 846 ZW | closed | 2 | . 847 ZW | large_airport | 1 | . 850 rows × 3 columns . 이건 좀 더 봐야겠다 . airports.groupby([&#39;iso_country&#39;, &#39;type&#39;]).sum() . id latitude_deg longitude_deg elevation_ft . iso_country type . AD heliport 360076 | 85.057431 | 3.052711 | 3450.0 | . AE closed 42256 | 23.298100 | 54.221699 | 0.0 | . heliport 6389256 | 519.481986 | 1140.423719 | 706.0 | . large_airport 316020 | 99.910756 | 220.694089 | 375.0 | . medium_airport 347052 | 172.974312 | 384.824277 | 1406.0 | . ... ... ... | ... | ... | ... | . ZM small_airport 11283607 | -1294.718014 | 2640.091073 | 255681.0 | . ZW closed 654955 | -34.870921 | 54.895665 | 6779.0 | . large_airport 3005 | -17.931801 | 31.092800 | 4887.0 | . medium_airport 24058 | -151.194701 | 234.847004 | 26744.0 | . small_airport 19701085 | -2384.126237 | 3832.335854 | 273732.0 | . 850 rows × 4 columns . HAVING . select type, count(*) from airports where iso_country = &#39;US&#39; group by type having count(*) &gt; 1000 order by count(*) desc; . s = airports[airports.iso_country == &#39;US&#39;] .groupby(&#39;type&#39;).filter(lambda g: len(g) &gt; 1000) .groupby(&#39;type&#39;).size() .sort_values(ascending=False) type(s) . pandas.core.series.Series . s . type small_airport 13565 heliport 6316 closed 1930 dtype: int64 . s.heliport . 6316 . Top N records . select iso_country from by_country order by size desc limit 10; . by_country = airports.groupby([&#39;iso_country&#39;]).size() .to_frame(&#39;airport_count&#39;).reset_index() df = by_country.nlargest(10, columns=&#39;airport_count&#39;) df . iso_country airport_count . 224 US | 23260 | . 29 BR | 4987 | . 35 CA | 2796 | . 12 AU | 2019 | . 152 MX | 1405 | . 117 KR | 1374 | . 74 GB | 1203 | . 184 RU | 1121 | . 54 DE | 957 | . 72 FR | 894 | . select iso_country from by_country order by size desc limit 10 offset 10; . by_country.nlargest(10, columns=&#39;airport_count&#39;).tail(5) . iso_country airport_count . 117 KR | 1374 | . 74 GB | 1203 | . 184 RU | 1121 | . 54 DE | 957 | . 72 FR | 894 | . Aggregate functions (MIN, MAX, MEAN) . select max(length_ft), min(length_ft), avg(length_ft), median(length_ft) -- 사용자정의 함수로 만들었다 치고 from runways; . runways.head(3) . id airport_ref airport_ident length_ft width_ft surface lighted closed le_ident le_latitude_deg le_longitude_deg le_elevation_ft le_heading_degT le_displaced_threshold_ft he_ident he_latitude_deg he_longitude_deg he_elevation_ft he_heading_degT he_displaced_threshold_ft . 0 269408 | 6523 | 00A | 80.0 | 80.0 | ASPH-G | 1 | 0 | H1 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 255155 | 6524 | 00AK | 2500.0 | 70.0 | GRVL | 0 | 0 | N | NaN | NaN | NaN | NaN | NaN | S | NaN | NaN | NaN | NaN | NaN | . 2 254165 | 6525 | 00AL | 2300.0 | 200.0 | TURF | 0 | 0 | 01 | NaN | NaN | NaN | NaN | NaN | 19 | NaN | NaN | NaN | NaN | NaN | . runways.describe() . id airport_ref length_ft width_ft lighted closed le_latitude_deg le_longitude_deg le_elevation_ft le_heading_degT le_displaced_threshold_ft he_latitude_deg he_longitude_deg he_elevation_ft he_heading_degT he_displaced_threshold_ft . count 41639.000000 | 41639.000000 | 41443.000000 | 38981.000000 | 41639.000000 | 41639.000000 | 14449.000000 | 14444.000000 | 12235.000000 | 14228.000000 | 2819.000000 | 14434.000000 | 14436.000000 | 12118.000000 | 16043.000000 | 3129.000000 | . mean 257324.082183 | 34094.595163 | 3262.173684 | 110.520125 | 0.260741 | 0.015562 | 31.197196 | -40.312925 | 1060.108868 | 104.374123 | 534.013480 | 31.194157 | -40.256715 | 1054.425400 | 261.749082 | 536.128476 | . std 21373.781124 | 68108.310531 | 2735.615483 | 231.510362 | 0.439044 | 0.123776 | 23.021831 | 79.858731 | 1465.765774 | 57.292638 | 471.867077 | 23.019014 | 79.844299 | 1458.619056 | 78.508982 | 466.220434 | . min 232758.000000 | 2.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | -75.597200 | -178.303000 | -1246.000000 | 0.000000 | 1.000000 | -75.595400 | -178.292000 | -1210.000000 | 0.000000 | 1.000000 | . 25% 243178.500000 | 8543.500000 | 1700.000000 | 59.000000 | 0.000000 | 0.000000 | 28.796800 | -96.667350 | 117.000000 | 57.000000 | 229.500000 | 28.788800 | -96.642750 | 115.000000 | 226.000000 | 228.000000 | . 50% 253593.000000 | 18692.000000 | 2743.000000 | 75.000000 | 0.000000 | 0.000000 | 37.591200 | -80.403000 | 571.000000 | 98.700000 | 400.000000 | 37.579950 | -80.368750 | 565.500000 | 270.000000 | 400.000000 | . 75% 264015.500000 | 27430.500000 | 4241.000000 | 100.000000 | 1.000000 | 0.000000 | 44.277400 | 15.322125 | 1247.000000 | 148.000000 | 685.000000 | 44.272275 | 15.366575 | 1237.000000 | 316.000000 | 699.000000 | . max 335591.000000 | 335590.000000 | 120000.000000 | 9000.000000 | 1.000000 | 1.000000 | 82.512800 | 179.337000 | 13202.000000 | 360.000000 | 6365.000000 | 82.522800 | 179.343000 | 13314.000000 | 363.000000 | 5001.000000 | . df = runways.agg({&#39;airport_ref&#39;: [&#39;min&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;count&#39;, &#39;std&#39;]}) df . airport_ref . min 2.000000 | . max 335590.000000 | . mean 34094.595163 | . median 18692.000000 | . count 41639.000000 | . std 68108.310531 | . df.T . min max mean median count std . airport_ref 2.0 | 335590.0 | 34094.595163 | 18692.0 | 41639.0 | 68108.310531 | . JOIN . select airport_ident, a.type, a.description, frequency_mhz from airport_freq as a join airports as b on airport_freq.airport_ref = airports.id where airports.ident = &#39;KLAX&#39; . airport_freq.merge( airports[airports.ident == &#39;KLAX&#39;][[&#39;id&#39;]], left_on=&#39;airport_ref&#39;, right_on=&#39;id&#39;, how=&#39;inner&#39; )[[&#39;airport_ident&#39;, &#39;type&#39;, &#39;description&#39;, &#39;frequency_mhz&#39;]] . airport_ident type description frequency_mhz . 0 KLAX | APP | SOCAL APP | 36.07 | . 1 KLAX | APP | SOCAL APP | 124.30 | . 2 KLAX | ATIS | ATIS | 133.80 | . 3 KLAX | CLD | CLNC DEL | 121.40 | . 4 KLAX | DEP | SOCAL DEP | 124.30 | . 5 KLAX | GND | GND | 121.65 | . 6 KLAX | MISC | CG | 34.50 | . 7 KLAX | MISC | CG | 898.40 | . 8 KLAX | OPS | AF | 37.22 | . 9 KLAX | TWR | TWR | 119.80 | . 10 KLAX | UNIC | UNICOM | 122.95 | . pd.merge( airport_freq, airports[airports.ident == &#39;KLAX&#39;][[&#39;id&#39;]], left_on=&#39;airport_ref&#39;, right_on=&#39;id&#39;, how=&#39;inner&#39; )[[&#39;airport_ident&#39;, &#39;type&#39;, &#39;description&#39;, &#39;frequency_mhz&#39;]] . airport_ident type description frequency_mhz . 0 KLAX | APP | SOCAL APP | 36.07 | . 1 KLAX | APP | SOCAL APP | 124.30 | . 2 KLAX | ATIS | ATIS | 133.80 | . 3 KLAX | CLD | CLNC DEL | 121.40 | . 4 KLAX | DEP | SOCAL DEP | 124.30 | . 5 KLAX | GND | GND | 121.65 | . 6 KLAX | MISC | CG | 34.50 | . 7 KLAX | MISC | CG | 898.40 | . 8 KLAX | OPS | AF | 37.22 | . 9 KLAX | TWR | TWR | 119.80 | . 10 KLAX | UNIC | UNICOM | 122.95 | . UNION ALL and UNION . select name, municipality from airports where ident = &#39;KLAX&#39; union all select name, municipality from airports where ident = &#39;KLGB&#39;; . airports[airports.ident == &#39;KLAX&#39;][[&#39;name&#39;, &#39;municipality&#39;]] . name municipality . 29141 Los Angeles International Airport | Los Angeles | . airports[airports.ident == &#39;KLGB&#39;][[&#39;name&#39;, &#39;municipality&#39;]] . name municipality . 29166 Long Beach /Daugherty Field/ Airport | Long Beach | . pd.concat([ airports[airports.ident == &#39;KLAX&#39;][[&#39;name&#39;, &#39;municipality&#39;]], airports[airports.ident == &#39;KLGB&#39;][[&#39;name&#39;, &#39;municipality&#39;]] ]) . name municipality . 29141 Los Angeles International Airport | Los Angeles | . 29166 Long Beach /Daugherty Field/ Airport | Long Beach | . INSERT . create table heroes (id integer, name text); insert into heroes values (1, &#39;Harry Potter&#39;); insert into heroes values (2, &#39;Ron Weasley&#39;); insert into heroes values (3, &#39;Hermione Granger&#39;); . df1 = pd.DataFrame({&#39;id&#39;: [1, 2], &#39;name&#39;: [&#39;Harry Potter&#39;, &#39;Ron Weasley&#39;]}) df1 . id name . 0 1 | Harry Potter | . 1 2 | Ron Weasley | . df2 = pd.DataFrame({&#39;id&#39;: [3], &#39;name&#39;: [&#39;Hermione Granger&#39;]}) df2 . id name . 0 3 | Hermione Granger | . pd.concat([df1, df2]).reset_index(drop=True) . id name . 0 1 | Harry Potter | . 1 2 | Ron Weasley | . 2 3 | Hermione Granger | . UPDATE . update airports set home_link = &#39;http://www.lawa.org/welcomelax.aspx&#39; where ident == &#39;KLAX&#39;; . airports[airports[&#39;ident&#39;] == &#39;KLAX&#39;][[&#39;home_link&#39;]] # airports[airports.ident == &#39;KLAX&#39;][[&#39;home_link&#39;]] . home_link . 29141 https://www.flylax.com/ | . airports.loc[airports[&#39;ident&#39;] == &#39;KLAX&#39;, &#39;home_link&#39;] . 29141 https://www.flylax.com/ Name: home_link, dtype: object . airports.loc[airports[&#39;ident&#39;] == &#39;KLAX&#39;, &#39;home_link&#39;] = &#39;http://www.lawa.org/welcomelax.aspx&#39; airports.loc[airports[&#39;ident&#39;] == &#39;KLAX&#39;, &#39;home_link&#39;] . 29141 http://www.lawa.org/welcomelax.aspx Name: home_link, dtype: object . airports.loc[airports.type == &#39;heliport&#39;, &#39;home_link&#39;] = &#39;http://haha&#39; airports[airports.type == &#39;heliport&#39;][[&#39;ident&#39;, &#39;name&#39;, &#39;home_link&#39;]] . ident name home_link . 0 00A | Total Rf Heliport | http://haha | . 9 00CN | Kitchen Creek Helibase Heliport | http://haha | . 12 00FD | Ringhaver Heliport | http://haha | . 15 00GE | Caffrey Heliport | http://haha | . 16 00HI | Kaupulehu Heliport | http://haha | . ... ... | ... | ... | . 56988 ZA-0117 | Pumba Helipad | http://haha | . 56990 ZA-0119 | Cape Town Heliport | http://haha | . 57011 ZA-0140 | Kuruman Hospital Heliport | http://haha | . 57108 ZIZ | Zamzama Heliport | http://haha | . 57373 ZZ-0001 | Sealand Helipad | http://haha | . 12007 rows × 3 columns . Immutability . airports.home_link = &#39;http//hoho&#39; # work airports.home_link . 0 http//hoho 1 http//hoho 2 http//hoho 3 http//hoho 4 http//hoho ... 57371 http//hoho 57372 http//hoho 57373 http//hoho 57374 http//hoho 57375 http//hoho Name: home_link, Length: 57376, dtype: object . airports[airports[&#39;ident&#39;] == &#39;KLAX&#39;].home_link = &#39;http//haha&#39; # not work airports[airports[&#39;ident&#39;] == &#39;KLAX&#39;].home_link . d: bin miniconda3 envs blog lib site-packages pandas core generic.py:5159: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self[name] = value . 29141 http//hoho Name: home_link, dtype: object . DELETE . delete from airport_freq where type = &#39;MISC&#39;; . airport_freq = pd.read_csv(&#39;https://ourairports.com/data/airport-frequencies.csv&#39;) . airport_freq[airport_freq.type != &#39;MISC&#39;] . id airport_ref airport_ident type description frequency_mhz . 0 70518 | 6528 | 00CA | CTAF | CTAF | 122.90 | . 1 307581 | 6589 | 01FL | ARCAL | NaN | 122.90 | . 2 75239 | 6589 | 01FL | CTAF | CEDAR KNOLL TRAFFIC | 122.80 | . 3 60191 | 6756 | 04CA | CTAF | CTAF | 122.90 | . 4 59287 | 6779 | 04MS | UNIC | UNICOM | 122.80 | . ... ... | ... | ... | ... | ... | ... | . 28903 51247 | 27242 | ZYTL | ATIS | ATIS | 126.65 | . 28904 51248 | 27242 | ZYTL | TWR | DALIAN TWR | 118.25 | . 28905 51243 | 27243 | ZYTX | ATIS | ATIS | 127.45 | . 28906 51244 | 27243 | ZYTX | TWR | SHENYANG TWR | 118.10 | . 28907 51190 | 27244 | ZYYJ | TWR | TWR | 130.00 | . 26683 rows × 6 columns . airport_freq.drop(airport_freq[airport_freq.type == &#39;MISC&#39;].index) . id airport_ref airport_ident type description frequency_mhz . 0 70518 | 6528 | 00CA | CTAF | CTAF | 122.90 | . 1 307581 | 6589 | 01FL | ARCAL | NaN | 122.90 | . 2 75239 | 6589 | 01FL | CTAF | CEDAR KNOLL TRAFFIC | 122.80 | . 3 60191 | 6756 | 04CA | CTAF | CTAF | 122.90 | . 4 59287 | 6779 | 04MS | UNIC | UNICOM | 122.80 | . ... ... | ... | ... | ... | ... | ... | . 28903 51247 | 27242 | ZYTL | ATIS | ATIS | 126.65 | . 28904 51248 | 27242 | ZYTL | TWR | DALIAN TWR | 118.25 | . 28905 51243 | 27243 | ZYTX | ATIS | ATIS | 127.45 | . 28906 51244 | 27243 | ZYTX | TWR | SHENYANG TWR | 118.10 | . 28907 51190 | 27244 | ZYYJ | TWR | TWR | 130.00 | . 26683 rows × 6 columns . Pandas&#50640;&#49436; &#51649;&#51217; SQL &#44396;&#47928; &#49892;&#54665;&#54616;&#44592; . df1 = airport_freq[airport_freq.airport_ident == &#39;KLAX&#39;] .sort_values(&#39;type&#39;, ascending=False) df1 . id airport_ref airport_ident type description frequency_mhz . 11962 60776 | 3632 | KLAX | UNIC | UNICOM | 122.95 | . 11961 60775 | 3632 | KLAX | TWR | TWR | 119.80 | . 11960 60774 | 3632 | KLAX | OPS | AF | 37.22 | . 11958 60772 | 3632 | KLAX | MISC | CG | 34.50 | . 11959 60773 | 3632 | KLAX | MISC | CG | 898.40 | . 11957 60771 | 3632 | KLAX | GND | GND | 121.65 | . 11956 60770 | 3632 | KLAX | DEP | SOCAL DEP | 124.30 | . 11955 60769 | 3632 | KLAX | CLD | CLNC DEL | 121.40 | . 11954 60768 | 3632 | KLAX | ATIS | ATIS | 133.80 | . 11952 60767 | 3632 | KLAX | APP | SOCAL APP | 36.07 | . 11953 60766 | 3632 | KLAX | APP | SOCAL APP | 124.30 | . !pip install pandasql . Requirement already satisfied: pandasql in d: bin miniconda3 envs blog lib site-packages (0.7.3) Requirement already satisfied: pandas in d: bin miniconda3 envs blog lib site-packages (from pandasql) (1.1.1) Requirement already satisfied: sqlalchemy in d: bin miniconda3 envs blog lib site-packages (from pandasql) (1.3.19) Requirement already satisfied: numpy in d: bin miniconda3 envs blog lib site-packages (from pandasql) (1.19.1) Requirement already satisfied: python-dateutil&gt;=2.7.3 in d: bin miniconda3 envs blog lib site-packages (from pandas-&gt;pandasql) (2.8.1) Requirement already satisfied: pytz&gt;=2017.2 in d: bin miniconda3 envs blog lib site-packages (from pandas-&gt;pandasql) (2020.1) Requirement already satisfied: six&gt;=1.5 in d: bin miniconda3 envs blog lib site-packages (from python-dateutil&gt;=2.7.3-&gt;pandas-&gt;pandasql) (1.15.0) . import pandasql as ps sql = &#39;&#39;&#39; select * from airport_freq where airport_ident = &#39;KLAX&#39; order by type desc; &#39;&#39;&#39; df = ps.sqldf(sql) type(df) . pandas.core.frame.DataFrame . df . id airport_ref airport_ident type description frequency_mhz . 0 60776 | 3632 | KLAX | UNIC | UNICOM | 122.95 | . 1 60775 | 3632 | KLAX | TWR | TWR | 119.80 | . 2 60774 | 3632 | KLAX | OPS | AF | 37.22 | . 3 60772 | 3632 | KLAX | MISC | CG | 34.50 | . 4 60773 | 3632 | KLAX | MISC | CG | 898.40 | . 5 60771 | 3632 | KLAX | GND | GND | 121.65 | . 6 60770 | 3632 | KLAX | DEP | SOCAL DEP | 124.30 | . 7 60769 | 3632 | KLAX | CLD | CLNC DEL | 121.40 | . 8 60768 | 3632 | KLAX | ATIS | ATIS | 133.80 | . 9 60767 | 3632 | KLAX | APP | SOCAL APP | 36.07 | . 10 60766 | 3632 | KLAX | APP | SOCAL APP | 124.30 | .",
            "url": "https://everlearningemployee.github.io/blog/post/SQL_vs_pandas.html",
            "relUrl": "/post/SQL_vs_pandas.html",
            "date": " • Aug 23, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "경제지표",
            "content": "import datetime datetime.datetime.now().strftime(&#39;%c&#39;) . &#39;Sat Jan 2 15:44:55 2021&#39; . 전체 코드는 GitHub 참고 바랍니다 . &#44396;&#47588; . &#48120;&#44397; ISM &#51228;&#51312;&#50629; &#44396;&#47588;&#44288;&#47532;&#51088; &#51648;&#49688; (PMI) . ISM이란: &#39;구매부장님협회&#39; 쯤 (구글검색) | +: 경기확장 / -: 경기위축 | 기준: 50 | . indx = [ (&#39;ISM/MAN_PMI&#39; , &#39;PMI&#39; , &#39;ISM 제조업 구매관리자 지수 (PMI)&#39;), (&#39;ISM/MAN_NEWORDERS&#39;, &#39;Index&#39;, &#39;ISM 제조업 신규주문 지수&#39; ), #(&#39;ISM/NONMAN_NMI&#39; , &#39;Index&#39;, &#39;ISM 서비스업 구매관리자 지수&#39; ), ] for indxCd, colNm, labelNm in indx: d = quandl.get(indxCd, start_date = &#39;2015-01-01&#39;) s = d[colNm] p = s.plot(label = indxCd) # 한글 폰트 문제 p.axhline(50) # PMI는 50이 기준 tmp = p.legend(loc=&#39;lower left&#39;) . findfont: Font family [&#39;gulim&#39;] not found. Falling back to DejaVu Sans. . 데이터/API 출처: https://www.quandl.com/data/ISM/MAN_PMI-PMI-Composite-Index / https://www.quandl.com/tools/python | . &#51473;&#44397; &#52264;&#51060;&#49888; &#51228;&#51312;&#50629; &#44396;&#47588;&#44288;&#47532;&#51088; &#51648;&#49688; . HSBC가 작성하는 중국 제조업 구매관리자지수 | https://kr.investing.com/economic-calendar/chinese-caixin-manufacturing-pmi-753 | . url = &#39;https://sbcharts.investing.com/events_charts/us/753.json&#39; hdr = {&#39;User-Agent&#39;: &#39;Mozilla/5.0&#39;} resp = requests.get(url, headers=hdr) json_data = json.loads(resp.text) df = pd.DataFrame(json_data[&#39;attr&#39;]).rename(columns={&#39;timestamp&#39;:&#39;Date&#39;}).set_index(&#39;Date&#39;) df.index = pd.to_datetime(df.index*1000000) p = df[&#39;actual&#39;][&#39;2015&#39;:].plot() tmp = p.axhline(50) # PMI는 50이 기준 . &#50896;&#51088;&#51116; . &#50896;&#50976; . WTI&#50976; &#49440;&#47932;: . https://kr.investing.com/commodities/crude-oil | . WTI&#50976; &#54788;&#47932;: . https://kr.investing.com/currencies/wti-usd | . url = &#39;https://www.investing.com/common/modules/js_instrument_chart/api/data.php&#39; prm_wti[&#39;period&#39;] = period = &#39;1-year&#39; prm_wti[&#39;pair_interval&#39;] = iterval[period] indx_wti = [ (8849 , &#39;WTI Futures&#39;), # Crude Oil WTI Futures (1043109, &#39;WTI/USD&#39; ), # WTI/USD - Crude Oil WTI Spot US Dollar #(8831, &#39;Copper Futures&#39;), # 구리 선물 ] plt.figure(figsize=(15, 8)) for cd, lbl in indx_wti: prm_wti[&#39;pair_id&#39;] = cd resp = requests.get(url, headers=hdr_wti, params=prm_wti) json_data = json.loads(resp.text) df = pd.DataFrame(json_data[&#39;candles&#39;], columns=[&#39;Date&#39;, lbl]).set_index(&#39;Date&#39;) df.index = pd.to_datetime(df.index*1000000) ax = plt.plot(df[&#39;2020-01-01&#39;:], label=lbl) tmp = plt.grid() tmp = plt.legend() . &#44396;&#47532; &#49440;&#47932; . 왜 중요한가: 구리 박사 vs 코코아 선생, 경기를 보는 두 지표 - 매일경제 | 런던금속거래소(London Metal Exchange) LME Copper | https://markets.businessinsider.com/commodities/copper-price | LME 데이터는 무료를 못 찾았으니까 아쉬운대로 COMEX (근데 COMEX 맞음?) https://github.com/FinanceData/FinanceDataReader https://www.investing.com/commodities/copper 데이터 | . | . | . import FinanceDataReader as fdr df_copper = fdr.DataReader(&#39;HG&#39;, &#39;2018&#39;) tmp = df_copper[&#39;Close&#39;][&#39;2020&#39;:].plot() . &#49548;&#48708;&#51116; . &#51064;&#53552;&#53080;&#54000;&#45352;&#53448; &#44144;&#47000;&#49548; &#53076;&#53076;&#50500; &#49440;&#47932; (ICE Cocoa Future) . 불황에는 사람들이 코코아를 덜 먹는다고 함 | https://www.theice.com/products/7/Cocoa-Futures/data?marketId=5867687&amp;span=2 | . url_ice = &#39;https://www.theice.com/marketdata/DelayedMarkets.shtml&#39; resp = requests.get(url_ice, params=prm_ice) json_data = json.loads(resp.text) bars = json_data[&#39;bars&#39;] df_cocoa = pd.DataFrame(bars, columns = [&#39;Date&#39;, &#39;Cocoa Future&#39;]).set_index(&#39;Date&#39;) df_cocoa.index = pd.to_datetime(df_cocoa.index) tmp = df_cocoa[&#39;2020-01-01&#39;:].plot() . &#44256;&#50857;&#51648;&#54364; . &#48120;&#44397; &#49888;&#44508;&#49892;&#50629;&#49688;&#45817; &#52397;&#44396;&#44148;&#49688; (Initial Jobless Claims, ICSA) . https://fred.stlouisfed.org/graph/?g=uvUG | . &#48120;&#44397; &#49892;&#50629;&#47456; . https://fred.stlouisfed.org/graph/?g=uw4u | . indx_fed = [ (&#39;ICSA&#39; , &#39;미국 신규실업수당 청구건수&#39;), (&#39;UNRATE&#39;, &#39;미국 실업률&#39; ), ] url_fed = &#39;https://fred.stlouisfed.org/graph/fredgraph.csv&#39; ax = None for id, labelNm in indx_fed: prm = { &#39;id&#39;: id, &#39;cosd&#39;: &#39;2020-01-01&#39;, # from dt #&#39;coed&#39;: &#39;2020-08-15&#39;, # to dt } resp = requests.get(url_fed, params=prm) csv = StringIO(resp.text) df = pd.read_csv(csv).set_index(&#39;DATE&#39;) df.index = pd.to_datetime(df.index) ax = df.plot(ax=ax, label=labelNm, secondary_y=(ax != None)) . COVID-19 . https://github.com/CSSEGISandData/COVID-19/tree/master/who_covid_19_situation_reports WHO Time Series CSV: https://covid19.who.int/WHO-COVID-19-global-data.csv | WHO regions: https://en.wikipedia.org/wiki/WHO_regions | . | . csv_url = &#39;https://covid19.who.int/WHO-COVID-19-global-data.csv&#39; df = pd.read_csv(csv_url) .rename(columns=lambda x: x.strip()) # 컬럼명 앞에 공백있음 df.Date_reported = pd.to_datetime(df.Date_reported) df = df.set_index(&#39;Date_reported&#39;) pv = df.pivot_table(index=&#39;Date_reported&#39;, columns=&#39;WHO_region&#39;, values=&#39;New_cases&#39;, aggfunc=np.sum) pv = pv.rename(columns=label) ax = pv.plot(figsize=(15, 8)).grid() . plt.figure(figsize=(15, 8)) df_country = df[&#39;2020&#39;:][df.Country_code.isin([&#39;KR&#39;,&#39;JP&#39;,&#39;SE&#39;,&#39;US&#39;])] pv = df_country.pivot_table(index=&#39;Date_reported&#39;, columns=&#39;Country_code&#39;, values=&#39;New_cases&#39;, aggfunc=np.sum) pv.KR.plot(legend=&#39;KR&#39;, style=&#39;r&#39;, lw=5) pv.JP.plot(legend=&#39;JP&#39;, style=&#39;-&#39;) pv.SE.plot(legend=&#39;SE&#39;, style=&#39;-&#39;) pv.US.plot(legend=&#39;US&#39;, style=&#39;-&#39;,secondary_y=True) plt.figure().legend() plt.show() . No handles with labels found to put in legend. . &lt;Figure size 1080x360 with 0 Axes&gt; . import datetime datetime.datetime.now().strftime(&#39;%c&#39;) . &#39;Sat Jan 2 15:45:08 2021&#39; . &#44277;&#48512;&#54620; YouTube &#50689;&#49345; . .",
            "url": "https://everlearningemployee.github.io/blog/post/Economic_indicators.html",
            "relUrl": "/post/Economic_indicators.html",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Container Graceful Shutdown",
            "content": "필요한 이유 . 롱트랜잭션 실행 중일 때 shutdown 한다면? | 서비스 업데이트 등의 상황으로 k8s가 pod 종료 시도할 때 | pod가 처리 중인 상태에서 강제로 kill 될 가능성 농후 | . 1안) SIGTERM에 대한 처리 구현 . Python Conatiner . signal trap으로 구현 | . RESTful API Contaner . Supervisord 설정 . stopsignal=HUP stopwaitsecs=10 . | uWSGI . 뭔짓을 해도 python에서 trap을 하지 못한다 | 그나마 graceful하게 reload은 한다 | . | . 시나리오1 . docker stop하면 | Supervisord에서 HUP 보내고 | uWSGI는 graceful reload (이뭐병) | (결과적으로 uWSGI랑 상관없이) Supervisord는 10초 기다렸다 kill all | 아직 안 죽었으면 docker는 time 기다리고 kill | 시나리오2 . 그냥 K8s에서 terminationGracePeriodSeconds을 길게 준다 | . Signal(IPC) . SIGINT SIGTERM SIGKILL SIGSTOP | Signal (IPC) | . signal can be caught or ignored   내용 . SIGINT | O | interrupt signal | ctrl-c. to provide a mechanism for an orderly, graceful shutdown. “user-initiated happy termination” | . SIGTERM | O | termination signal | to kill the process, gracefully or not, but to first allow it a chance to cleanup. | . SIGKILL | X | kill signal | 프로세스 즉시 죽임!! 최후의 수단!! | . SIGQUIT | O | dump core signal | ctrl- . to provide a mechanism for the user to abort the process. “user-initiated unhappy termination” | . SIGHUP |   | Terminate |   | . SIGSTOP | X | pause signal | resuming via SIGCONT | . SIGCHLD |   |   | Child process terminated, stopped, or continued | . SIGWINCH |   |   |   | . Python에서 처리 . Python에서 처리: signal — Set handlers for asynchronous events | https://codeday.me/ko/qa/20190529/660372.html (Python 2.X) | https://code-examples.net/ko/docs/python~3.7/library/signal | http://blog.kichul.co.kr/2018/01/12/python%EC%97%90%EC%84%9C-signal-%EC%B2%98%EB%A6%AC/ | . uWSGI에서 처리 . Configuring uWSGI for Production Deployment . 아래 설정 절대 안 먹는다. 해도 python에서 signal trap 안된다. . py-call-osafterfork = true . | 하긴 먹어도 쓸데가 없다 . | . | Signals for controlling uWSGI . graceful하게 shutdown하는게 없다!! 나머지는 그냥 immediately kill 해버린다 SIGHUP이 그나마 graceful 한데 reload를 해버린다 | 얼씨구 Windows는 SIGHUP이 없다 | . | . | . Signal Description Convenience command . SIGHUP | gracefully reload all the workers and the master process | --reload | . SIGTERM | brutally reload all the workers and the master process | (use --die-on-term to respect the convention of shutting down the instance) | . SIGINT | immediately kill the entire uWSGI stack | --stop | . SIGQUIT | immediately kill the entire uWSGI stack |   | . Supervisord에서 처리 . https://serverfault.com/questions/386319/is-supervisord-shutting-down-gracefully 야간데… | stopsignal The signal used to kill the program when a stop is requested. This can be any of TERM, HUP, INT, QUIT, KILL, USR1, or USR2. | Default: TERM | Required: No. | . | stopwaitsecs The number of seconds to wait for the OS to return a SIGCHLD to supervisord after the program has been sent a stopsignal. If this number of seconds elapses before supervisord receives a SIGCHLD from the process, supervisord will attempt to kill it with a final SIGKILL. | Default: 10 | Required: No. | . | . | . Docker에서 처리 . Gracefully Stopping Docker Containers | https://codeday.me/ko/qa/20190529/660372.html | . K8s에서 처리 . https://pracucci.com/graceful-shutdown-of-kubernetes-pods.html | Kubernetes: Termination of pods | Kubernetes: Pods lifecycle hooks and termination notice | Kubernetes: Container lifecycle hooks | kubernetes를 이용한 서비스 무중단 배포 terminationGracePeriodSeconds | . | . 2안) 재처리 . 3안) 운영 프로세스로 해결 . shutdown 필요할 시 . request 더이상 발생 안되게 조치 하고 | 충분한 시간 경과 후 (request 처리 중이던 pod가 처리를 모두 마친 후) | shutdown 진행 | python signal trap 예 . app = flask.Blueprint(&#39;app&#39;, __name__) # Graceful Shutdown (signal 처리) 구현 imBusy = [] def graceful_shutdown_handler(signum = None, frame = None): logging.info(&quot;I am dying.. [%s]&quot; % signum) logging.debug(&quot;working [%s]&quot; % imBusy) while len(imBusy) &gt; 0: time.sleep(0.5) logging.info(&quot;Good Bye&quot;) exit(0) # signal 처리 등록 try: signals = [signal.SIGTERM, signal.SIGINT, signal.SIGHUP] except: # Windows에는 signal.SIGHUP 없음 signals = [signal.SIGTERM, signal.SIGINT] for sig in signals: signal.signal(sig, graceful_shutdown_handler) @app.before_app_request def imbusy(): global imBusy imBusy.append(threading.currentThread().name) @app.after_app_request def solong(res): global imBusy logging.debug(&quot;remove [%s]&quot; % threading.currentThread().name) imBusy.remove(threading.currentThread().name) return res .",
            "url": "https://everlearningemployee.github.io/blog/post/container_graceful_shutdown.html",
            "relUrl": "/post/container_graceful_shutdown.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Python 함수 실행시간 측정 decorator",
            "content": "함수 실행시간 측정용 decorator 정의 . def exec_time(original_fn): @wraps(original_fn) def wrapper_fn(*args, **kwargs): int_ln = 70 str_start = &quot;== START [%s] ==&quot; % (original_fn.__name__) int_s1 = int( (int_ln - len(str_start)) / 2 ) int_s2 = int_ln - len(str_start) - int_s1 print(&quot; n&quot; + &quot;=&quot; * int_s1 + str_start + &quot;=&quot; * int_s2) start_time = time.time() result = original_fn(*args, **kwargs) dt = time.time() - start_time str_end = &quot;== END [%s]: working %.4f sec ==&quot; % (original_fn.__name__, dt) int_e1 = int( (int_ln - len(str_end)) / 2 ) int_e2 = int_ln - len(str_end) - int_e1 print(&quot;=&quot; * int_e1 + str_end + &quot;=&quot; * int_e2 + &quot; n&quot;) return result return wrapper_fn . 사용 예 . 코드 . @exec_time def hahahoho(): … 생략 … logger.debug(&#39;long long time&#39;) . 이 때 로그 출력은 다음과 같다 . ========================== START [hahahoho] ========================== … 생략 … [2019-07-15 05:05:35,166] DEBUG long long time ================ END [hahahoho]: working 26.7614 sec ================= .",
            "url": "https://everlearningemployee.github.io/blog/post/Python_decorator_to_measure_the_execution_time_of_methods.html",
            "relUrl": "/post/Python_decorator_to_measure_the_execution_time_of_methods.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "KFServing",
            "content": "KFServing이란 . Kubernetes Custom Resource Definition(CRD) 으로 제공되는 ML Serving 아키텍처 | Serverless로 동작 (내부적으로 Knative 사용) | . . 1. InferenceService . . KFServing의 배포/서비스 단위 (CRD) | api는 Tensorflow V1 HTTP API를 따름 (Out-of-the-box의 경우) | Ensembling, A/B testing, Multi-Arm-Bandits 등은 InferenceService를 조합하여 구현해야함 (단일 InferenceService로는 불가능) Seldon Core와 비교됨 (참고2) | . | . 2. InferenceService 구성요소 . 2.1 Predictor . 필수 | REST API path의 postfix가 :predict | trained model의 serving을 수행 storage에 저장된 trained model을 load하여 서비스 지원하는 storage provider Google Cloud Storage gs:// | S3 Compatible Object Storage s3:// | Azure Blob Storage https:// | Local filesystem file:// | Persistent Volume Claim (PVC) pvc:// | . | . | trained model은 프로비저닝되어 제공되는 이미지(framework)에 따름 제공되는 이미지 프로비저닝 - kfserving/docs/apis/v1beta1 at kubeflow/kfserving (github.com) tensorflow | tensorrt | xgboost | sklearn | onnx | pytorch | . | . | . | . 2.2 Transformer . 필수아님 | prediction 또는 explanation의 실행 전/후에 수행될 로직을 탑재 (preprocess/postprocess) → 전처리 / 후처리 용도 | Interceptioon Filter로서 동작 | . 2.3 Explainer . 필수아님 | REST API path의 postfix가 :explain | 제공되는 이미지 프로비저닝 Seldon Alibi | . | . 3. InferenceService 배포 . 방법1: kubectl . kubectl apply -f xxxxx.yaml . | 방법2: Kubeflow Pipelines (Sample) . | 방법3: KFServing Python SDK (Sample) . | . 4. InferenceService 구성요소 유형 . 역할에 따른 구분 Predictor | Transformer | Explainer | . | 이미지 프로비저닝 여부에 따른 구분 Out-of-the-box ← 프로비저닝된 이미지 사용 | Custom | . | . 4.1 Out-of-the-box Predictor . 프로비저닝 이미지를 사용 프로비저닝할 프레임워크(예: tensorflow, pytorch) 명시 필요 (이미지에 대한 기술 X) | . | 모델이 저장된 위치 필요 (storageUri) | . 4.1.1 tensorflow 예제 . 4.1.1.1 manifests: tensorflow.yaml . apiVersion: &quot;serving.kubeflow.org/v1beta1&quot; kind: &quot;InferenceService&quot; metadata: name: &quot;flowers-sample&quot; spec: default: predictor: tensorflow: storageUri: &quot;gs://kfserving-samples/models/tensorflow/flowers&quot; . 4.1.2 pytorch 예제 . 4.1.2.1 manifests: pytorch.yaml . apiVersion: &quot;serving.kubeflow.org/v1alpha2&quot; kind: &quot;InferenceService&quot; metadata: name: &quot;pytorch-cifar10&quot; spec: default: predictor: pytorch: storageUri: &quot;gs://kfserving-samples/models/pytorch/cifar10/&quot; modelClassName: &quot;Net&quot; . 4.2 Custom Predictor . 프로비저닝 이미지를 사용하지 않고 Custom 이미지를 사용 | . 4.2.1 Flask Hello World 예제 . 4.2.1.1 manifests: custom.yaml . apiVersion: serving.kubeflow.org/v1alpha2 kind: InferenceService metadata: labels: controller-tools.k8s.io: &quot;1.0&quot; name: custom-sample spec: default: predictor: custom: container: image: sds.redii.net/sample/custom-sample env: - name: GREETING_TARGET value: &quot;Python KFServing Sample&quot; . 4.2.1.2 Dockerfile . # ... 선략 ... COPY app.py requirements.txt ./ # ... 생략 ... CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 app:app . 4.2.1.3 application: app.py . import os from flask import Flask app = Flask(__name__) @app.route(&#39;/v1/models/custom-sample:predict&#39;) def hello_world(): greeting_target = os.environ.get(&#39;GREETING_TARGET&#39;, &#39;World&#39;) return &#39;Hello {}! n&#39;.format(greeting_target) if __name__ == &quot;__main__&quot;: app.run(debug=True, host=&#39;0.0.0.0&#39;, port=int(os.environ.get(&#39;PORT&#39;, 8080))) . 4.2.2 kfserving-custom-model 예제 . 4.2.2.1 manifests: custom.yaml . apiVersion: serving.kubeflow.org/v1alpha2 kind: InferenceService metadata: labels: controller-tools.k8s.io: &quot;1.0&quot; name: kfserving-custom-model spec: default: predictor: custom: container: image: {username}/kfserving-custom-model . 4.2.2.2 Dockerfile . # ... 선략 ... COPY model.py imagenet_classes.txt ./ CMD [&quot;python&quot;, &quot;model.py&quot;] . 4.2.2.3 application: model.py . kfserving.KFModel을 상속받고 load()와 predict()를 구현함 | load()를 미리 호출하여 model을 restore한 후, 서버를 start() | . import kfserving from typing import List, Dict class KFServingSampleModel(kfserving.KFModel): def __init__(self, name: str): super().__init__(name) self.name = name self.ready = False def load(self): # model load 코드 생략 self.model = model self.ready = True def predict(self, request: Dict) -&gt; Dict: inputs = request[&quot;instances&quot;] # predict 코드 생략 return {&quot;predictions&quot;: results} if __name__ == &quot;__main__&quot;: model = KFServingSampleModel(&quot;kfserving-custom-model&quot;) model.load() kfserving.KFServer(workers=1).start([model]) . 4.3 Transformer . 4.3.1 Image Transformer with PyTorch Predictor 예제 . 4.3.1.1 manifests: image_transformer.yaml . apiVersion: serving.kubeflow.org/v1alpha2 kind: InferenceService metadata: name: transformer-cifar10 spec: default: transformer: custom: container: image: gcr.io/kubeflow-ci/kfserving/image-transformer:latest name: user-container predictor: pytorch: modelClassName: Net storageUri: gs://kfserving-samples/models/pytorch/cifar10 . 4.3.1.2 Dockerfile . # ... 선략 ... ENTRYPOINT [&quot;python&quot;, &quot;-m&quot;, &quot;image_transformer&quot;] . 4.3.1.3 application: image_transformer.py . kfserving.KFModel을 상속받고 preprocess()와 postprocess()를 구현함 | . def image_transform(instance): ...생략... return res.tolist() class ImageTransformer(kfserving.KFModel): def __init__(self, name: str, predictor_host: str): super().__init__(name) self.predictor_host = predictor_host def preprocess(self, inputs: Dict) -&gt; Dict: return {&#39;instances&#39;: [image_transform(instance) for instance in inputs[&#39;instances&#39;]]} def postprocess(self, inputs: List) -&gt; List: return inputs if __name__ == &quot;__main__&quot;: transformer = ImageTransformer(args.model_name, predictor_host=args.predictor_host) kfserver = kfserving.KFServer() kfserver.start(models=[transformer]) . 5. KFServing Python SDK . 5.1 Model / Server . “4.2 Custom Predictor / 4.2.2 kfserving-custom-model 예제” 및 “4.3 Transformer” 참조 | . 5.2 Client . “3. InferenceService 배포 / 방법3: KFServing Python SDK (Sample)” 참조 | . 참고1: TensorFlow Model을 Save하는 방법 . 체크포인트 . training 중간과 training 마지막에 체크포인트(checkpoint)를 저장 다시 training 하지 않고 모델을 재사용하거나 | training 과정이 중지된 경우 이어서 training을 진행 가능 | . | .ckpt 파일 모델의 가중치를 포함하는 하나 이상의 샤드(shard) | 가중치가 어느 샤드에 저장되어 있는지를 나타내는 인덱스 파일 | 모델 전체를 저장하지 않음 → 모델 구조는 저장하지 않음 | . | . HDF5 (Hierarchical Data Format) . 모델 전체를 저장 | .h5 또는 .hdf5 파일 가중치 값 | 모델 설정(구조) | 옵티마이저 설정 | . | . TensorFlow SavedModel . language-neutral format to save machine-learned models → Tensorflow Serving 등에서 사용 | 모델 전체를 저장 | Ref: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/saved_model#tensorflow-savedmodel | 저장 예제 코드 | . export_dir = ... ... builder = tf.saved_model.builder.SavedModelBuilder(export_dir) with tf.Session(graph=tf.Graph()) as sess: ... builder.add_meta_graph_and_variables(sess, [tf.saved_model.tag_constants.TRAINING], signature_def_map=foo_signatures, assets_collection=foo_assets) ... with tf.Session(graph=tf.Graph()) as sess: ... builder.add_meta_graph([&quot;bar-tag&quot;, &quot;baz-tag&quot;]) ... builder.save() . SignatureDef로 다음 항목을 정의 method_name | inputs: 입력 tensor의 이름, dtype, shape을 정의 | outpus: 출력 tensor의 이름, dtype, shape을 정의 | . | 다음과 같은 구조로 모델이 저장됨 | . assets/ assets.extra/ variables/ variables.data-?????-of-????? variables.index saved_model.pb . 참고2: Seldon Core Inference Graph(Pipeline) . . https://docs.seldon.io/projects/seldon-core/en/stable/graph/inference-graph.html | https://www.slideshare.net/seldon_io/seldon-deploying-models-at-scale (p28) | .",
            "url": "https://everlearningemployee.github.io/blog/post/KFServing.html",
            "relUrl": "/post/KFServing.html",
            "date": " • May 15, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Git Authentication",
            "content": "GitHub Error: Authentication Failed from the Command Line . 사용자 Settings &gt; Developer settings &gt; Personal access tokens | . | Git pull/push 시 Password 물어보지 않도록 설정하기(credential.helper) . git config credential.helper store . | 변경 추적 . git config log.follow true . | 구찮지 . git config --global user.email &quot;everlearningemployee@gmail.com&quot; git config --global user.name &quot;빨강달&quot; . | .",
            "url": "https://everlearningemployee.github.io/blog/post/git-authentication.html",
            "relUrl": "/post/git-authentication.html",
            "date": " • Mar 14, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Ubuntu에 Docker 설치",
            "content": "출처: How To Install Docker On Ubuntu 18.04 Bionic Beaver . sudo apt-get update sudo apt-get remove docker docker-engine docker.io sudo apt install -y docker.io sudo systemctl start docker sudo systemctl enable docker sudo usermod -aG docker $(whoami) .",
            "url": "https://everlearningemployee.github.io/blog/post/docker-install-on-ubuntu.html",
            "relUrl": "/post/docker-install-on-ubuntu.html",
            "date": " • Mar 14, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "Python TDD",
            "content": "Python TDD . 참고자료 . 김정주 Webzen -SlideShare 파이썬 TDD 101 (pdf) | 최명규 - SlideShare - Python Unittest (pdf) | . Python Unit Testing Framework . 5 Python Unit Test Frameworks To Learn In 2019 . unittest 모듈 - 기본 내장 . | PyUnit - unittest 예전 이름 . | nose - 한물 갔다고 함 . | PyTest - 당첨 . | coverage - 테스트 커버리지 분석 . | Doctest - 특수 목적 . | Google 트렌드: PyTest, nose2, “unittest”에 관한 검색 관심도를 시간, 위치, 인기도순으로 탐색 . | . PyTest . PyTest Tutorial: What is, Install, Fixture, Assertions . Why use PyTest? | How to install PyTest | First Basic PyTest | Assertions in PyTest | How pytest identifies the test files and test methods | Run multiple tests from a specific file and multiple files. | Run a subset of entire test | Running tests in parallel :+1: | Pytest fixtures | Parameterized tests :+1: | Xfail / Skip tests | Results XML | A pytest framework testing an API | . Python 테스트 시작하기 . [Python] how to use pytest &amp; mock &amp; fixture . unittest vs pytest .",
            "url": "https://everlearningemployee.github.io/blog/post/hello-pytest.html",
            "relUrl": "/post/hello-pytest.html",
            "date": " • Mar 12, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "Kafka를 공부해보자",
            "content": ". PreStop Hook . 구현 필요 . Consumer Group / Partition . Kafka 운영자가 말하는 Kafka Consumer Group . 컨슈머 그룹 별로 각각 offset이 유지됨 . | 한 번 늘린 Partition은 줄일 수 없음 . | 갯수(Partition) &gt; 갯수(Consumer): . 어쨌든 일 함. 특정 Consumer로 일이 쏠림 | . | 갯수(Partition) &lt; 갯수(Consumer) . 노는 Consumr 생심. 이런 상황 절대 허용할 수 없음 . ML 적용 전략 . | . | . | K8s에 ML Logic Consumer Pod가 배포됐다고 치자 . | Consumer Group은 업무별로 1개 . 중복 처리 X이므로 여러 Consumer들이 Offset을 공유해야함 | . | 갯수(Parition)과 갯수(Cousumer ) 매핑 . partition은 consumming 과정이 동기인 듯 . 추정의 이유: 1개의 consumer는 1개 이상의 partition에 붙을 수 있으나 | . | 1개의 partition은 1개의 consumer만 담당 | 무조건 갯수(Partition) &gt;= 갯수(Consumer)로 구성 필요 | ML컨수머는 롱트랜잭션이므로 | . | 1안) 갯수(Partition) = 갯수(Consumer): 1대 1로 갯수를 맞춤 . Consumer Pod를 Scaling 하지 않음 (Min == Max) 장점: 확실 | . | 단점: Pod 리소스 점유 아까워 | . | 2안) 갯수(Partition) = Max(갯수(Consumer)) . Consumer Pod를 Scaling 함 장점: Pod 갯수 필요한 만큼 까지만 떠 있음 | . | 단점: 업무 특성 상, Scale Out 시 모델 리스토어를 위하여 Pod ready 시간이 수십초~수분 소요 예상 ← 적절한 선택이 아님 | . | 3안) Parition과 Cousumer 갯수는 테스트로 적정치 선정 . Parition과 Cousumer의 갯수 매핑 자체는 실질적으로 의미가 없음 . | 전제: Partition에 대한 메시지 배분이 라운드로빈이 아니라, 대기열이 가장 짧은 partition 우선 . ← Custom Partitioner 구현 필요? . ← 이미 준비되어있는 선택할 수 있는 Partitioner 유형이 있을 듯 . Producer 생성 시, partitionerType 설정 . default = 0, random = 1, cyclic = 2, keyed = 3, custom = 4 | . | https://github.com/SOHU-Co/kafka-node/issues/1094 . | Parition과 Cousumer 각각의 갯수 자체가 의미 있음 . | 구찮… 3)안은 못 쓰겠다. . | . | . | . | . 이슈 . Partitioner Type . Producer 설정임 property: partitioner.class (default: kafka.producer.DefaultPartitioner) | . | Why is data not evenly distributed among partitions when a partitioning key is not specified? | . Partition Rebalancing . Rebalancing Kafka partitions - TabMo Labs | Incremental Cooperative Rebalancing in Apache Kafka: Why Stop the World When You Can Change It? | . Rebalancing 지연 . 카프카 컨슈머 애플리케이션 배포 전략 - 11번가 사례 | 그룹 내 특정 컨슈머가 poll 메소드를 호출을 지연 | 모든 컨슈머가 poll 해야 rebalancing 진행 | . NiFi 연동 . PublishKafka Partitioner class에 아래 2개 밖에 없음 RoundRobinPartitioner Messages will be assigned partitions in a round-robin fashion, sending the first message to Partition 1, the next Partition to Partition 2, and so on, wrapping as necessary. | DefaultPartitioner | . | . | . Consumer Option . Kafka - Kafka Consumer(카프카 컨슈머) Java&amp;CLI - 코딩스타트 | . Option 내용 컨수머 설정 . bootstrap.servers | 호스트와 포트 정보로 구성된 리스트 |   | . group.id | 컨슈머 그룹 식별자 | 업무별 1개 | . auto.offset.reset | 오프셋이 없거나 현재 오프셋이 더 이상 존재하지 않은 경우 (earliest가장초기/latest마지막/none에러) | latest | . fetch.min.bytes | 한번에 가져올 수 있는 최소 데이터 사이즈이다. 만약 지정한 사이즈보다 작은 경우, 요청에 대해 응답하지 않고 데이터가 누적될 때까지 기다린다 | 뭐지? 확인 필요. 작아야하나? | . fetch.max.bytes | 한번에 가져올 수 있는 최대 데이터 사이즈 | 확인 필요. 별로 안 커도 될듯 | . request.timeout.ms | 요청에 대해 응답을 기다리는 최대 시간 | 뭐지? 확인 필요. 별로 안 커도 될듯 | . session.timeout.ms | 컨슈머와 브로커사이의 세션 타임 아웃시간. 브로커가 컨슈머가 살아있는 것으로 판단하는 시간(기본값 10초) | 롱트랜잭션이므로 충분히 길게 | . hearbeat.interval.ms | 그룹 코디네이터에게 얼마나 자주 KafkaConsumer poll() 메소드로 하트비트를 보낼 것인지 조정한다. session.timeout.ms와 밀접한 관계가 있으며 session.timeout.ms보다 낮아야한다. 일반적으로 1/3 값정도로 설정한다.(기본값 3초) | 이거이거 확인 필요. 우리는 롱트랜잭션 | . max.poll.records | 단일 호출 poll()에 대한 최대 레코드 수를 조정한다. 이 옵션을 통해 애플리케이션이 폴링 루프에서 데이터를 얼마나 가져올지 양을 조정할 수 있다 | 뭐지? | . max.poll.interval.ms | 컨슈머가 살아있는지를 체크하기 위해 하트비트를 주기적으로 보내는데, 컨슈머가 계속해서 하트비트만 보내고 실제로 메시지를 가져가지 않는 경우가 있을 수도 있다. 이러한 경우 컨슈머가 무한정 해당 파티션을 점유할 수 없도록 주기적으로 poll을 호출하지 않으면 장애라고 판단하고 컨슈머 그룹에서 제외한 후 다른 컨슈머가 해당 파티션에서 메시지를 가져갈 수 있게한다. | 이거이거 확인 필요. 우리는 롱트랜잭션 | . # Kafka 토픽 topic: diff-ai # 업무단위: 정책 상 토픽과 1:1 group_id: mymyGrp # Kafka 서버 bootstrap_servers: localhost:9092 # 오프셋이 없거나 현재 오프셋이 더 이상 존재하지 않은 경우 # earliest:가장초기, latest마지막, none:에러 auto_offset_reset: latest # 컨슈머와 브로커사이의 세션 타임 아웃시간 (초). 브로커가 컨슈머가 살아있는 것으로 판단하는 시간 # ML컨수머는 롱트랜잭션이므로 충분히 길게 설정할 것 session_timeout_ms: 1200 # 롱트랜잭션이며 새로 추가되는 pod가 메시지를 즉시 받아올 수 있도록 1로 설정 max_poll_records: 1 . Hello Kafka . Topic 만들기 . kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 4 --topic diff-ai kafka-topics.bat --zookeeper localhost:2181 --list . Producer 콘솔 기동 . kafka-console-producer --broker-list localhost:9092 --topic diff-ai kafka-console-producer --broker-list localhost:9092 --topic mymy-A &lt; .. .. .. Test TestData short_input.txt . Consumer 콘솔 기동 . kafka-console-consumer --bootstrap-server localhost:9092 --topic diff-ai --group mymyGrp kafka-console-consumer --bootstrap-server loclahost:9092 --topic mymy-B --group mymyGrp . Topic alter . kafka-topics --alter --zookeeper localhost:2181 --topic diff-ai --partitions 4 . Kafka port: 9092 . | Zookeeper port: 2181 . | Hello world in Kafka using Python - Timber.io . | . Python Lib . 구글 트랜드 결과 kafka-python &gt; PyKafka &gt; confluent-kafka-python . | 처리속도 비교 . | Kafka Python client 성능 테스트 (원본자료: Python Kafka Client Benchmarking 2016-06-15) . | https://kafka-python.readthedocs.io/en/master/apidoc/modules.html . | kafka-python 헬로우월드 . Consumer . from kafka import KafkaConsumer import time consumer = KafkaConsumer(&#39;diff-ai&#39;, group_id=&#39;mymyGrp&#39;, bootstrap_servers=&#39;localhost:9092&#39;) for message in consumer: print(&quot; n&quot;+&quot;=&quot;*60) print(message.value) print(&quot;-&quot;*60) #time.sleep(1) consumer.close() . | . | . 모니터링 . Apache kafka 모니터링을 위한 Metrics 이해 및 최적화 방안 | Burrow https://github.com/linkedin/Burrow | Kafka Consumer Lag 모니터링, Burrow를 알아보자 (1) | Monitoring Kafka with Burrow - Part 1 - Cloudera Community | . | Apache ZooKeeper 소개 - SlideShare | .",
            "url": "https://everlearningemployee.github.io/blog/post/hello-kafka.html",
            "relUrl": "/post/hello-kafka.html",
            "date": " • Mar 12, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Uncaught Exception Trace",
            "content": "Uncaught Exception Trace . import sys import traceback def exception_hook(type, value, tb): logging.error(&#39;=&#39; * 80) logging.error(f&#39;Type: {type}&#39;) logging.error(f&#39;Value: {value}&#39;) t = traceback.format_exception(type, value, tb) t = [i.rstrip().split(&#39; n&#39;) for i in t] for i in sum(t, []): logging.error(i) logging.error(&#39;-&#39; * 80) sys.excepthook = exception_hook 1 / 0 . 전체 샘플 코드 . 익셉션 트레이스가 로그에 이렇게 찍힌다 . 2020-03-08 17:51:52 ERROR ================================================================================ 2020-03-08 17:51:52 ERROR Type: &lt;class &#39;IndexError&#39;&gt; 2020-03-08 17:51:52 ERROR Value: tuple index out of range 2020-03-08 17:51:52 ERROR Traceback (most recent call last): 2020-03-08 17:51:52 ERROR File &quot;d:/temp/uncaughtExceptionTrace.py&quot;, line 59, in &lt;module&gt; 2020-03-08 17:51:52 ERROR lumberjack() 2020-03-08 17:51:52 ERROR File &quot;d:/temp/uncaughtExceptionTrace.py&quot;, line 52, in lumberjack 2020-03-08 17:51:52 ERROR bright_side_of_death() 2020-03-08 17:51:52 ERROR File &quot;d:/temp/uncaughtExceptionTrace.py&quot;, line 56, in bright_side_of_death 2020-03-08 17:51:52 ERROR return tuple()[0] 2020-03-08 17:51:52 ERROR IndexError: tuple index out of range 2020-03-08 17:51:52 ERROR -- . Catching every single exception with Python | 파이썬 공식 자습서 - 8. 에러와 예외 | 파이썬을 이용한 전문적인 오류 처리 | .",
            "url": "https://everlearningemployee.github.io/blog/post/uncaughtExceptionTrace.html",
            "relUrl": "/post/uncaughtExceptionTrace.html",
            "date": " • Mar 8, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Korbit 트레이딩봇 - 밀림 사자 Leo",
            "content": "Leo - Korbit 트레이딩봇 . 배경지식 . 리밸런싱 . [기고] 수익률 높이는 효과적인 리밸런싱 전략 . | 자산배분전략을 자주 강조하는 이유 : 장기 성과의 중요 . | 자산의 리밸런싱(rebalancing) . | 리밸런싱 사례 (https://youtu.be/2w5dXRReZJU?t=503) . | . 가상화폐 거래소 코빗 . 코빗 거래수수료 | 거래수수료 구분 코빗은 더이상 Taker/Maker 수수료를 구분하지 않는다. 신경 안 써도 됨 | Taker 주문 : 즉시 체결되는 주문 시장가로 주문 | 지정가 주문 시, 이미 오더북에 올라와있는 주문과 동일한 금액으로 주문 | 지정가 매수 주문 시, 체결 가능한 호가보다 높은 가격으로 주문 최고 매수호가 &lt; 매수주문가 → 비싸게 사겠다고 하니까 즉시 체결 | . | 지정가 매도 주문 시, 체결 가능한 호가보다 낮은 가격으로 주문 최저 매도호가 &gt; 매도주문가 → 싸게 팔겠다고 하니까 즉시 체결 | . | . | Maker 주문 : 즉시 체결되지 않는 주문 지정가 매수 주문 시, 체결 가능한 호가보다 낮은 가격으로 주문 최고 매수호가 &gt; 매수주문가 → 싸게 사겠다고 하는 무리 중 하나 | . | 지정가 매도 주문 시, 체결 가능한 호가보다 높은 가격으로 주문 최저 매도호가 &lt; 매도주문가 → 비싸게 팔겠다고 하는 무리 중 하나 | . | . | . | . 용어 . 최근내주문체결가: 나의 주문 중 마지막으로 체결된 거래의 거래가 | 목표 밸런싱비율: “코인 평가금액 : 예수금잔고”의 목표 비율 | 거래트리거링가격변동포인트: 이 %포인트 만큼 체결가 변동이 일어나면 리밸런싱한다 | 제약조건 tick_size 호가단위 | min_price 최소 주문가 | order_min_size 최소 주문량 | max_price 최대 주문가 | order_max_size 최대 주문량 | . | 수수료 volume 해당 통화쌍의 30일간의 거래량(KRW) | maker_fee 베이시스 포인트(BPS - 1/100 퍼센트 기준)로 표기된 maker 거래 수수료율 | taker_fee 베이시스 포인트(BPS - 1/100 퍼센트 기준)로 표기된 taker 거래 수수료율 | . | . 로직 . . 주문가/주문량 산출 . 파라미터/변수 . 입력 . 입력값 $b$ 목표 밸런싱비율 | $t$ 거래트리거링가격변동포인트 | . | 체결된 주문내역 $p_f$ 최근내주문체결가 | . | 잔고 조회 $a_i$ 코인보유량 | $v_c$ 현금(예수금잔고) | . | env constans (제약조건) $a_m$ 최소주문량 | . | 시장 현황 상세정보 bid: 최고 매수호가 현재 매수 주문 중 가장 높은 가격 | ask: 최저 매도호가 현재 매도 주문 중 가장 낮은 가격 | . | . | . | 중간값 . $v_e$ 거래직전 평가액 | $v_o$ 주문금액 | . | 리턴 . $p_o$ 주문가 | $a_o$ 주문량 | . | . 로직 . 매수 . 목표밸런싱비율 $b$ 는 입력값으로 고정이다 . b=ve+vovc−vob = {v_e + v_o over v_c - v_o}b=vc​−vo​ve​+vo​​ . 여기서 . vo=ao⋅pov_o = a_o cdot p_ovo​=ao​⋅po​ . ve=ai⋅pov_e = a_i cdot p_ove​=ai​⋅po​ . 따라서 주문량 $a_o$는 . ao=b⋅vc−po⋅aipo⋅(1+b)a_o = { b cdot v_c - p_o cdot a_i over p_o cdot (1 + b) }ao​=po​⋅(1+b)b⋅vc​−po​⋅ai​​ . 여기서 주문가 $p_o$는 . po=pf⋅(1−t)p_o = p_f cdot (1 - t)po​=pf​⋅(1−t) . 만약 주문량 $a_o$이 최소주문량 $a_m$보다 작다면 . ao&lt;ama_o &lt; a_mao​&lt;am​ . 주문량 $a_o$를 최소주문량 $a_m$으로 설정한다 . ao:=ama_o := a_mao​:=am​ . 이 때 주문가 $p_o$는 . po=b⋅vcai+am⋅(1+b)p_o = { b cdot v_c over a_i + a_m cdot ( 1 + b ) }po​=ai​+am​⋅(1+b)b⋅vc​​ . 매도 . 목표밸런싱비율 $b$ 는 입력값으로 고정이다 . b=ve−vovc+vob = {v_e - v_o over v_c + v_o}b=vc​+vo​ve​−vo​​ . 여기서 . vo=ao⋅pov_o = a_o cdot p_ovo​=ao​⋅po​ . ve=ai⋅pov_e = a_i cdot p_ove​=ai​⋅po​ . 따라서 주문량 $a_o$는 . ao=po⋅ai−b⋅vcpo⋅(1+b)a_o = { p_o cdot a_i - b cdot v_c over p_o cdot (1 + b) }ao​=po​⋅(1+b)po​⋅ai​−b⋅vc​​ . 여기서 주문가 $p_o$는 . po=pf⋅(1+t)p_o = p_f cdot (1 + t)po​=pf​⋅(1+t) . 만약 주문량 $a_o$이 최소주문량 $a_m$보다 작다면 . ao&lt;ama_o &lt; a_mao​&lt;am​ . 주문량 $a_o$를 최소주문량 $a_m$으로 설정한다 . ao:=ama_o := a_mao​:=am​ . 이 때 주문가 $p_o$는 . po=b⋅vcai−am⋅(1+b)p_o = { b cdot v_c over a_i - a_m cdot ( 1 + b) }po​=ai​−am​⋅(1+b)b⋅vc​​ . 로깅 . 주문 . 매수주문, 매도주문 호출 성공 후 로깅 . 주문ID (매수주문, 매도주문) | 매도매수구분 (입력값) | 주문가 (주문가/주문량 산출 로직 리턴값) | 주문량 (주문가/주문량 산출 로직 리턴값) | 산출베이스체결ID (체결된 주문내역) | 주문가/주문량 산출 로직 입력값 $b$ 목표 밸런싱비율 (입력값) | $t$ 거래트리거링가격변동포인트 (입력값) | $p_f$ 최근내주문체결가 (체결된 주문내역) | $a_i$ 코인보유량 (잔고 조회) | $v_c$ 현금(예수금잔고) (잔고 조회) | bid: 최고 매수호가 현재 매수 주문 중 가장 높은 가격 (시장 현황 상세정보) | ask: 최저 매도호가 현재 매도 주문 중 가장 낮은 가격 (시장 현황 상세정보) | last: 최종 체결 가격 (시장 현황 상세정보) | . | . 체결 . 체결된 주문내역 확인 후 로깅 . 그냥 json 그대로 저장할까? . 체결된 주문내역 리턴값 체결ID | 매도매수구분 | 체결시각 | 수수료 통화: 매수 시 코인, 매도 시 krw | 수량 | . | 주문ID | 체결가 통화 | 수량 | . | 체결량 통화 | 수량 | . | . | 잔고 조회 리턴값 코인보유량 | 현금(예수금잔고) | . | . Git . https://github.com/everlearningemployee/leo.git .",
            "url": "https://everlearningemployee.github.io/blog/post/leo.html",
            "relUrl": "/post/leo.html",
            "date": " • Mar 7, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "파이썬 기초 5종 세트!! [설치, 헬로우월드, VSCode, pip, 가상환경] 이 모든 것을 한 영상에!!",
            "content": "&lt;/div&gt; . 실습 시나리오 + 코드 .",
            "url": "https://everlearningemployee.github.io/blog/post/hello-python.html",
            "relUrl": "/post/hello-python.html",
            "date": " • Nov 30, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "월출봉에 달 뜨거든 날 불러주오 .",
          "url": "https://everlearningemployee.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://everlearningemployee.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}